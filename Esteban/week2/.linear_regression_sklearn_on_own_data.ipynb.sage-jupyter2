{"backend_state":"init","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-f043ceb8-2843-4332-86f5-8b8442c01dba.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"137d94","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"25099b","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"39cef5","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"b183aad68e9d92822d562b2d62bac4ab20c205c4","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":0,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"72c6ef","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[39.36562799] [-0.15297545]\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8c4979","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"908903","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c705bb","input":"print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.5749959307112218\n"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"6a6828","input":"X.shape","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":11,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"a84308","input":"Y = df[\"survival\"].to_numpy()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"036e48","input":"Y.shape","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":17,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"ed9929","input":"idx = np.arange(len(X))","metadata":{"id":"WW77IzOwZaKp"},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"0c2548","input":"np.random.shuffle(idx)","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"aed02d","input":"idx","output":{"0":{"data":{"text/plain":"array([123, 246, 183, 140, 237,  52,  11, 186,  30, 122, 167, 160, 154,\n       202, 270, 138, 231,  16,  26,   7, 193, 159,  57, 252, 174, 108,\n        33, 216,  12,  80,  83, 198, 172, 228,  43, 255, 100,   2, 169,\n        36, 240, 205,  19,  28,   3, 209,  27, 262, 177, 264,  71, 156,\n        86, 223,  69, 247, 254,  94,   9, 164, 179, 150, 256, 242,  56,\n        82,  37,   5,  98, 165, 243, 147,  34, 116, 269, 114,  22,  42,\n        88, 235,  10, 203,  51, 136,  93, 119, 175,  47, 162,  14, 211,\n        77, 221, 253, 111, 144, 176, 188, 206, 157, 187,   6,  50, 229,\n       101, 217,  13, 163, 233, 201, 248,  45, 225,  70, 137, 195, 171,\n       168, 182,  95, 250, 170, 224, 257, 130,  84, 226, 271,  32,  85,\n       118, 166, 236, 125, 214, 265, 106, 190, 244, 133, 192, 251, 197,\n       266, 141, 178,  35, 238,  74,  75, 145, 267,  58, 185, 260, 220,\n       194,  38, 115, 129,  54, 161, 212,  78,  73, 213, 104, 222,  96,\n       184,  76, 120, 200, 152, 103, 234,   4, 208,  20,  53,  23, 107,\n       219, 105,  24, 204, 126,  60,  97, 259,  29, 128,  91,  31,  92,\n       249, 196,  49, 155, 143,  61,  65,  81, 112, 191,  99, 153, 151,\n       210,   1, 113, 232,  21, 127, 139,   8, 149,  64, 148, 268, 102,\n       142, 239,  15,  48, 146,  55, 261,  41, 189, 110,  87, 173,  25,\n        44, 132, 227, 158,  62,  46, 199,  66,  63,  40, 258,  18,  59,\n       245,  79,   0, 135, 131, 109, 230, 215, 218,  17,  67, 207,  89,\n        72, 117, 263, 134, 241, 180, 181, 124,  68,  39,  90, 121])"},"exec_count":20,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"0985b7","input":"split_threshold = int(len(X) * 0.8)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"047e60","input":"split_threshold","output":{"0":{"data":{"text/plain":"217"},"exec_count":22,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"e3ae76","input":"train_idx = idx[:split_threshold]","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"65884d","input":"test_idx = idx[split_threshold:]","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"5d8e48","input":"x_train = X[train_idx]","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"59e95a","input":"x_test = X[test_idx]","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"33cfd5","input":"y_train = Y[train_idx]","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"86f7b4","input":"y_test = Y[test_idx]","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"3070fe","input":"x_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"c910e6","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('timerecurrence', fontsize = 20) \nplt.ylabel('survival', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"f8aa90c04f473da250b67ed8408e3a3b1f99c114","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":33,"metadata":{"image/png":{"height":342,"width":321},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"f72b2a","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"ename":"NameError","evalue":"name 'y_hat' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-dd8f5290d61d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mMAE\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mMAE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'y_hat' is not defined"]}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"3ec363","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\n\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"afe9dd","input":"my_data = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv')","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"ebcb43","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"466b4d","input":"my_data.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":40,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"a73dae","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\nlength = len(my_data.index) #save length of array of later","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"8cb8c8","input":"my_data[\"mpg\"].min()","output":{"0":{"data":{"text/plain":"9.0"},"exec_count":42,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"f938c2","input":"my_data[\"mpg\"].max()","output":{"0":{"data":{"text/plain":"46.6"},"exec_count":43,"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"eb23ff","input":"df = pd.read_csv(\"../../NKI_cleaned.csv\")","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"d4ff64","input":"df.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>...</th>\n      <th>Contig36312_RC</th>\n      <th>Contig38980_RC</th>\n      <th>NM_000853</th>\n      <th>NM_000854</th>\n      <th>NM_000860</th>\n      <th>Contig29014_RC</th>\n      <th>Contig46616_RC</th>\n      <th>NM_000888</th>\n      <th>NM_000898</th>\n      <th>AF067420</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>267</th>\n      <td>s71</td>\n      <td>308</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2.6083</td>\n      <td>1.982204</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.695745</td>\n      <td>-0.076025</td>\n      <td>0.201054</td>\n      <td>-0.108361</td>\n      <td>0.222534</td>\n      <td>-0.471391</td>\n      <td>0.026301</td>\n      <td>0.476758</td>\n      <td>-0.468408</td>\n      <td>-0.843889</td>\n    </tr>\n    <tr>\n      <th>268</th>\n      <td>s72</td>\n      <td>309</td>\n      <td>39</td>\n      <td>1</td>\n      <td>5.5041</td>\n      <td>3.028063</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.743322</td>\n      <td>0.108220</td>\n      <td>0.083472</td>\n      <td>-0.859677</td>\n      <td>-0.551512</td>\n      <td>-0.191424</td>\n      <td>-0.844488</td>\n      <td>-0.357929</td>\n      <td>-0.585760</td>\n      <td>0.169989</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>s73</td>\n      <td>310</td>\n      <td>50</td>\n      <td>1</td>\n      <td>2.6192</td>\n      <td>2.149213</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.778710</td>\n      <td>0.251779</td>\n      <td>-0.063160</td>\n      <td>0.450576</td>\n      <td>0.452686</td>\n      <td>1.055764</td>\n      <td>0.591880</td>\n      <td>-0.510884</td>\n      <td>0.251903</td>\n      <td>-0.822792</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>s75</td>\n      <td>311</td>\n      <td>52</td>\n      <td>1</td>\n      <td>2.2905</td>\n      <td>2.209446</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.614775</td>\n      <td>-0.417394</td>\n      <td>-0.077948</td>\n      <td>-0.126006</td>\n      <td>-0.841332</td>\n      <td>-0.274742</td>\n      <td>-0.063019</td>\n      <td>-0.396531</td>\n      <td>0.356816</td>\n      <td>0.345088</td>\n    </tr>\n    <tr>\n      <th>271</th>\n      <td>s76</td>\n      <td>312</td>\n      <td>52</td>\n      <td>1</td>\n      <td>3.7370</td>\n      <td>2.127310</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.234388</td>\n      <td>0.181319</td>\n      <td>-0.030782</td>\n      <td>-1.035581</td>\n      <td>-0.521642</td>\n      <td>-0.301661</td>\n      <td>-0.060805</td>\n      <td>0.794952</td>\n      <td>-1.089303</td>\n      <td>-0.326193</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 1570 columns</p>\n</div>","text/plain":"    Patient   ID  age  eventdeath  survival  timerecurrence  chemo  hormonal  \\\n267     s71  308   48           1    2.6083        1.982204      1         0   \n268     s72  309   39           1    5.5041        3.028063      0         0   \n269     s73  310   50           1    2.6192        2.149213      0         0   \n270     s75  311   52           1    2.2905        2.209446      0         1   \n271     s76  312   52           1    3.7370        2.127310      0         0   \n\n     amputation  histtype  ...  Contig36312_RC  Contig38980_RC  NM_000853  \\\n267           1         1  ...       -0.695745       -0.076025   0.201054   \n268           1         1  ...       -0.743322        0.108220   0.083472   \n269           1         1  ...       -0.778710        0.251779  -0.063160   \n270           1         1  ...       -0.614775       -0.417394  -0.077948   \n271           1         1  ...       -0.234388        0.181319  -0.030782   \n\n     NM_000854  NM_000860  Contig29014_RC  Contig46616_RC  NM_000888  \\\n267  -0.108361   0.222534       -0.471391        0.026301   0.476758   \n268  -0.859677  -0.551512       -0.191424       -0.844488  -0.357929   \n269   0.450576   0.452686        1.055764        0.591880  -0.510884   \n270  -0.126006  -0.841332       -0.274742       -0.063019  -0.396531   \n271  -1.035581  -0.521642       -0.301661       -0.060805   0.794952   \n\n     NM_000898  AF067420  \n267  -0.468408 -0.843889  \n268  -0.585760  0.169989  \n269   0.251903 -0.822792  \n270   0.356816  0.345088  \n271  -1.089303 -0.326193  \n\n[5 rows x 1570 columns]"},"exec_count":8,"output_type":"execute_result"}},"pos":4,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"45c0ca","input":"X = df[\"timerecurrence\"].to_numpy()","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"08c435","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"10a6e4","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"13dffd","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"4735b2","input":"### Split the data\n\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.\n\n","metadata":{"id":"g5Zk8_6ksLur"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"66727d","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"667d43","input":"### Data Splitting\n\n","metadata":{"id":"w78dUshNZarz"},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"9c184f","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"a07c79","input":"# Linear regression using SKLearn on your own Data!\n\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!\n\n","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"ef14db","input":"# SVM & Random Forest\n\n","metadata":{"id":"2OixzlOot-U6"},"pos":35,"type":"cell"}
{"id":0,"time":1657834810260,"type":"user"}
{"last_load":1657903532284,"type":"file"}