{"backend_state":"init","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-1ed07e93-e162-40fb-ae41-26b241378780.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"linear_regression_numpy_tutorial.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"1e4e10","input":"","metadata":{"id":"bUuZFIRxa-sZ"},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"230b57","input":"","metadata":{"id":"7ubqNNVxa-sZ"},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5341a2","input":"","metadata":{"id":"VPv4Rha8a-sa"},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"67a66f","input":"","metadata":{"id":"owTTVO4Ba-sY"},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"731c6d","input":"","metadata":{"id":"ox6WlPb7a-sa"},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8e2ac5","input":"","metadata":{"id":"mdxlUKLka-sZ"},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"99f41b","input":"","metadata":{"id":"8vkl-uJMa-sZ"},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e96738","input":"","metadata":{"id":"l5xP_R3ya-sZ"},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ec7f86","input":"","metadata":{"id":"cvxyHdHha-sa"},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"d4ec06","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1627498066861,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IecuRdF1a-sG"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f5c6f4","input":"linr = LinearRegression()","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"4db13b","input":"linr.fit(x_train, y_train)","output":{"0":{"ename":"NameError","evalue":"name 'x_train' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-ad3feed3c49c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlinr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e5eb26","input":"for epoch in range(n_epochs):\n    # Computes our model's predicted output\n    yhat = a + b * x_train\n    \n    # How wrong is our model? That's the error! \n    error = (y_train - yhat)\n    \n    # It is a regression, so it computes mean squared error (MSE)\n    loss = (error ** 2).mean()\n    \n    # Computes gradients for both \"a\" and \"b\" parameters\n    a_grad = -2 * error.mean()\n    b_grad = -2 * (x_train * error).mean()\n    \n    # Updates parameters using gradients and the learning rate\n    a = a - lr * a_grad\n    b = b - lr * b_grad\n    \nprint(a, b)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":230,"status":"ok","timestamp":1627499222901,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IEGhbnhoa-sQ","outputId":"6df14990-801c-4030-bd27-e2c19b95c577"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02354075] [1.96896447]\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"5a2716","input":"plt.figure(figsize=(10,5))\ny_vals = b + a * x_val\nplt.plot(x_val, y_vals, '--')\n\nplt.scatter(x_val,y_val, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":229,"status":"ok","timestamp":1627499225902,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"V9wnGeT_eou8","outputId":"1dc573e8-ebd4-4861-94e0-ff1a6d4229d3"},"output":{"0":{"data":{"image/png":"dc43e6c5cd70ea4a132afbbacd5f42b590eef900","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"760545","input":"np.random.seed(3)\nnp.random.rand(10, 1)","output":{"0":{"data":{"text/plain":"array([[0.5507979 ],\n       [0.70814782],\n       [0.29090474],\n       [0.51082761],\n       [0.89294695],\n       [0.89629309],\n       [0.12558531],\n       [0.20724288],\n       [0.0514672 ],\n       [0.44080984]])"},"exec_count":2,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e47876","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42) # Why 42 (It works well for computer science) - https://medium.com/@leticia.b/the-story-of-seed-42-874953452b94\n\n# randomly generate x which is a vector of 100 points \nx = np.random.rand(100, 1)\n\n# define exact linear function y = 1 + 2x + epsilon where epsilon (0.1*random numbers)\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","metadata":{"executionInfo":{"elapsed":219,"status":"ok","timestamp":1627498568931,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"BYHvay0xa-sK"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"27e569","input":"# Shuffles the indices\nidx = np.arange(100)\nnp.random.shuffle(idx)\n\n# Uses first 80 random indices for train\ntrain_idx = idx[:80]\n\n# Uses the remaining indices for validation\nval_idx = idx[80:]\n\n# Generates train and validation sets\nx_train, y_train = x[train_idx], y[train_idx]\nx_val, y_val = x[val_idx], y[val_idx]\n","metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1627498579768,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"_ntl2sX3a-sL"},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"e174ab","input":"idx = np.arange(100)\nidx","output":{"0":{"data":{"text/plain":"array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])"},"exec_count":3,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"dcc7db","input":"plt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the validation set \nplt.subplot(1,2,2)\nplt.scatter(x_val,x_val)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1627498583872,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"W1JhyZ_Na-sM","outputId":"909f5fd9-c203-45cf-d41f-58b09bb727ef"},"output":{"0":{"data":{"image/png":"f075f4d1128da421683b3b7123675e91e79d107a","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"e53554","input":"np.random.shuffle(idx)\nidx","output":{"0":{"data":{"text/plain":"array([82,  5,  6, 42, 99, 96, 40, 25, 41, 38, 84, 97,  3, 92, 23, 72,  4,\n       12, 19, 52, 34, 76, 45, 15, 59,  9, 47, 71, 94,  8, 83, 17, 58, 86,\n       65, 95, 57, 73, 98, 68, 30, 70, 13, 31, 78, 11, 85, 88, 32, 50, 16,\n       27, 35, 36, 80, 10, 55, 53, 74, 87, 75, 79, 46, 61, 67, 91, 56, 77,\n       89, 18, 64,  0, 54, 28, 21, 49, 20, 37, 48, 33, 43,  7, 62, 24, 29,\n       69, 51,  1, 60, 63,  2, 66, 22, 90, 81, 26, 14, 39, 93, 44])"},"exec_count":4,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"250279","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42)\n\n# Initializes parameters \"a\" and \"b\" randomly - they don't need to be good yet\na = np.random.randn(1)\nb = np.random.randn(1)\n\n# print values of a and b \nprint(a, b)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":241,"status":"ok","timestamp":1627498594869,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"MjeQPrOKa-sP","outputId":"fe881c09-932e-46f0-9f40-79b6b5c69617"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[0.49671415] [-0.1382643]\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"75a31a","input":"train_idx = idx[:80]\ntrain_idx","output":{"0":{"data":{"text/plain":"array([82,  5,  6, 42, 99, 96, 40, 25, 41, 38, 84, 97,  3, 92, 23, 72,  4,\n       12, 19, 52, 34, 76, 45, 15, 59,  9, 47, 71, 94,  8, 83, 17, 58, 86,\n       65, 95, 57, 73, 98, 68, 30, 70, 13, 31, 78, 11, 85, 88, 32, 50, 16,\n       27, 35, 36, 80, 10, 55, 53, 74, 87, 75, 79, 46, 61, 67, 91, 56, 77,\n       89, 18, 64,  0, 54, 28, 21, 49, 20, 37, 48, 33])"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1ca313","input":"# Initialization of hyper-parameters (in our case, only learning rate and number of epochs)\n\n# Sets learning rate (how much the AI conforms to each set of feedbacks)\nlr = 1e-1\n# Defines number of epochs (how many times training is repeated)\nn_epochs = 1000","metadata":{"executionInfo":{"elapsed":240,"status":"ok","timestamp":1627498605594,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"xaIPfjB1a-sP"},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ca3815","input":"plt.figure(figsize=(10,5))","output":{"0":{"data":{"text/plain":"<Figure size 720x360 with 0 Axes>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"text/plain":"<Figure size 720x360 with 0 Axes>"},"exec_count":6,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"ee9015","input":"from sklearn.linear_model import LinearRegression","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":885,"status":"ok","timestamp":1627498630865,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"jkPf0bt4a-sV","outputId":"422ab4c2-fceb-490e-ca2d-b45f09b26cff"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"1b9afd","input":"## plot the train and validation sets","metadata":{"id":"DCCwyhkya-sM"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"24fe34","input":"## split data into train and validation sets (80/20)","metadata":{"id":"irEOBQoca-sL"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"5d28b3","input":"## check our results use Scikit-learn's linear regression\n\nJust to make sure we haven’t done any mistakes in our code, we can use Scikit-Learn’s Linear Regression to fit the model and compare the coefficients.\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"61e555","input":"## The results!\n\nThey match up to 6 decimal places — we have a fully working implementation of linear regression using Numpy.","metadata":{"id":"yE4V3P9aa-sX"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"82a8c5","input":"### For each epoch, there are 5 training steps:\n* Compute model’s predictions \n* Compute the error (the difference between the actual value and predicted value) \n* Compute the loss ( mean square error = the average of (error)^2)\n* Compute the gradients for every parameter (require calculus)\n* Update the parameters a and b","metadata":{"id":"Tmk5nl_Va-sQ"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"938b58","input":"# Linear regression using NumPy","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"a51ca2","input":"","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"be1ca1","input":"## Data Generation","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"cbf3f7","input":"## linear regression using numpy ","metadata":{"id":"gi4pQP8Ia-sO"},"pos":14,"type":"cell"}
{"cell_type":"raw","id":"cc1a60","input":"","pos":11,"type":"cell"}
{"id":0,"time":1657043041368,"type":"user"}
{"last_load":1657213289454,"type":"file"}