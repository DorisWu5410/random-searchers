{"backend_state":"init","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-ac964103-e153-4384-a8b5-959c27f3a41a.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"linear_regression_numpy_tutorial.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"47dc61","input":"80: 80 onwards","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4b5763","input":"","metadata":{"id":"ox6WlPb7a-sa"},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5a258f","input":"","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7cd005","input":"","metadata":{"id":"cvxyHdHha-sa"},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8952f2","input":":80 ending at 80","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8aaaf0","input":"","metadata":{"id":"7ubqNNVxa-sZ"},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a7c6f5","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"db3790","input":"","metadata":{"id":"bUuZFIRxa-sZ"},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e66ea6","input":"","metadata":{"id":"VPv4Rha8a-sa"},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"dc8be9","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt","metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1627498066861,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IecuRdF1a-sG"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"ea0315","input":"plt.figure(figsize=(10,5))\n\ny_vals = b + a * x_val\n\nplt.plot(x_val, y_vals, '--')\n\nplt.scatter(x_val,y_val, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":229,"status":"ok","timestamp":1627499225902,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"V9wnGeT_eou8","outputId":"1dc573e8-ebd4-4861-94e0-ff1a6d4229d3"},"output":{"0":{"data":{"image/png":"dc43e6c5cd70ea4a132afbbacd5f42b590eef900","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":15,"metadata":{"needs_background":"light","tags":[]},"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"2af4ef","input":"np.random.seed(42)\nx = np.random.rand(100, 1)\nx\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"bc56e1","input":"plt.subplot(1,2,1)\nplt.scatter(x, y, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data')\nplt.grid('on')","output":{"0":{"data":{"image/png":"83c90401c24b21f630eb15ca636f4c3d98691848","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":450,"width":365},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"a69bec","input":"idx = np.arange(100)\nidx","output":{"0":{"data":{"text/plain":"array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])"},"exec_count":18,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"182e1d","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42) # Why 42 (It works well for computer science) - https://medium.com/@leticia.b/the-story-of-seed-42-874953452b94\n\n\n# randomly generate x which is a vector of 100 points \nx = np.random.rand(100, 1)\n\n# define exact linear function y = 1 + 2x + epsilon where epsilon (0.1*random numbers)\ny = 1 + 2 * x + .1 * np.random.randn(100, 1)","metadata":{"executionInfo":{"elapsed":219,"status":"ok","timestamp":1627498568931,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"BYHvay0xa-sK"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"0ac239","input":"np.random.shuffle(idx)\nidx","output":{"0":{"data":{"text/plain":"array([38, 26, 95, 41, 60, 99, 93, 98,  8, 72, 94, 57, 10, 50, 16, 65,  5,\n       69, 12, 31, 53, 48, 82, 59, 22, 79, 30, 52, 74, 21, 83, 80, 63, 17,\n       32, 85, 71, 20, 25,  1, 73,  0, 89, 23, 87, 70, 75, 97, 96, 76, 39,\n       78,  7, 33,  6, 77, 45, 19, 36,  4, 18, 42, 62, 66, 88, 43, 91, 14,\n       49, 51, 67, 15, 46, 68, 86, 28, 61, 35,  2, 29, 90, 13, 84, 92, 58,\n        3, 27,  9, 64, 44, 11, 47, 24, 55, 81, 40, 54, 34, 56, 37])"},"exec_count":21,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"e1a2c5","input":"train_idx = idx[:80]\ntrain_idx","output":{"0":{"data":{"text/plain":"array([38, 26, 95, 41, 60, 99, 93, 98,  8, 72, 94, 57, 10, 50, 16, 65,  5,\n       69, 12, 31, 53, 48, 82, 59, 22, 79, 30, 52, 74, 21, 83, 80, 63, 17,\n       32, 85, 71, 20, 25,  1, 73,  0, 89, 23, 87, 70, 75, 97, 96, 76, 39,\n       78,  7, 33,  6, 77, 45, 19, 36,  4, 18, 42, 62, 66, 88, 43, 91, 14,\n       49, 51, 67, 15, 46, 68, 86, 28, 61, 35,  2, 29])"},"exec_count":23,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"f4bdfc","input":"val_idx = idx[80:]\nval_idx","output":{"0":{"data":{"text/plain":"array([90, 13, 84, 92, 58,  3, 27,  9, 64, 44, 11, 47, 24, 55, 81, 40, 54,\n       34, 56, 37])"},"exec_count":25,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"030996","input":"x_train = x[train_idx]","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"a20dab","input":"x_train","output":{"0":{"data":{"text/plain":"array([[0.68423303],\n       [0.19967378],\n       [0.4937956 ],\n       [0.49517691],\n       [0.38867729],\n       [0.10789143],\n       [0.5612772 ],\n       [0.02541913],\n       [0.60111501],\n       [0.00552212],\n       [0.77096718],\n       [0.19598286],\n       [0.02058449],\n       [0.96958463],\n       [0.30424224],\n       [0.54269608],\n       [0.15599452],\n       [0.98688694],\n       [0.83244264],\n       [0.17052412],\n       [0.89482735],\n       [0.54671028],\n       [0.33089802],\n       [0.32533033],\n       [0.29214465],\n       [0.11586906],\n       [0.60754485],\n       [0.93949894],\n       [0.70685734],\n       [0.13949386],\n       [0.06355835],\n       [0.86310343],\n       [0.35675333],\n       [0.52475643],\n       [0.06505159],\n       [0.32518332],\n       [0.19871568],\n       [0.61185289],\n       [0.78517596],\n       [0.95071431],\n       [0.81546143],\n       [0.37454012],\n       [0.47221493],\n       [0.36636184],\n       [0.63755747],\n       [0.77224477],\n       [0.72900717],\n       [0.42754102],\n       [0.52273283],\n       [0.77127035],\n       [0.44015249],\n       [0.35846573],\n       [0.86617615],\n       [0.94888554],\n       [0.05808361],\n       [0.07404465],\n       [0.66252228],\n       [0.29122914],\n       [0.30461377],\n       [0.15601864],\n       [0.43194502],\n       [0.03438852],\n       [0.82873751],\n       [0.14092422],\n       [0.88721274],\n       [0.9093204 ],\n       [0.71324479],\n       [0.18182497],\n       [0.18485446],\n       [0.77513282],\n       [0.80219698],\n       [0.18340451],\n       [0.31171108],\n       [0.07455064],\n       [0.72960618],\n       [0.59241457],\n       [0.27134903],\n       [0.80839735],\n       [0.73199394],\n       [0.04645041]])"},"exec_count":27,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"0b4408","input":"y_train = y[train_idx]","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"6be304","input":"x_test = x[val_idx]","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"72e642","input":"# Shuffles the indices\nidx = np.arange(100)\nnp.random.shuffle(idx)\n\n# Uses first 80 random indices for train\ntrain_idx = idx[:80]\n\n# Uses the remaining indices for validation\nval_idx = idx[80:]\n\n# Generates train and validation sets\nx_train, y_train = x[train_idx], y[train_idx]\nx_val, y_val = x[val_idx], y[val_idx]\n","metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1627498579768,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"_ntl2sX3a-sL"},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"8136ff","input":"x_test","output":{"0":{"data":{"text/plain":"array([[0.11959425],\n       [0.21233911],\n       [0.31098232],\n       [0.76078505],\n       [0.04522729],\n       [0.59865848],\n       [0.51423444],\n       [0.70807258],\n       [0.28093451],\n       [0.25877998],\n       [0.96990985],\n       [0.52006802],\n       [0.45606998],\n       [0.92187424],\n       [0.62329813],\n       [0.12203823],\n       [0.59789998],\n       [0.96563203],\n       [0.0884925 ],\n       [0.09767211]])"},"exec_count":30,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"73afd7","input":"y_test = y[val_idx]","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"4191e5","input":"y_test","output":{"0":{"data":{"text/plain":"array([[1.32139451],\n       [1.47600496],\n       [1.52449648],\n       [2.49703129],\n       [0.99851215],\n       [1.99856008],\n       [1.94824115],\n       [2.36596945],\n       [1.58461501],\n       [1.59666316],\n       [2.97269482],\n       [1.89995094],\n       [1.77060289],\n       [2.85060477],\n       [2.29397955],\n       [1.24060529],\n       [2.04073361],\n       [2.73938694],\n       [1.07075463],\n       [1.44166844]])"},"exec_count":33,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"daa980","input":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.show()","output":{"0":{"data":{"image/png":"c84cb7ba8e0122ecf3587c8d441ae4dba62a06b1","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":34,"metadata":{"image/png":{"height":342,"width":321},"needs_background":"light"},"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"7ca099","input":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","output":{"0":{"data":{"image/png":"83e515ac30557d23ae34329add623d75f322480b","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":35,"metadata":{"image/png":{"height":342,"width":322},"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"19c06b","input":"# initialize your random seed to ensure reproducibility of your result\nnp.random.seed(42)\n\n# Initializes parameters \"a\" and \"b\" randomly - they don't need to be good yet\na = np.random.randn(1)\nb = np.random.randn(1)\n\n# print values of a and b \nprint(a, b)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":241,"status":"ok","timestamp":1627498594869,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"MjeQPrOKa-sP","outputId":"fe881c09-932e-46f0-9f40-79b6b5c69617"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[0.49671415] [-0.1382643]\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"2e20e2","input":"# Initialization of hyper-parameters (in our case, only learning rate and number of epochs)\n\n# Sets learning rate (how much the AI conforms to each set of feedbacks)\nlr = 1e-1\n# Defines number of epochs (how many times training is repeated)\nn_epochs = 1000","metadata":{"executionInfo":{"elapsed":240,"status":"ok","timestamp":1627498605594,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"xaIPfjB1a-sP"},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"e140ca","input":"for epoch in range(n_epochs):\n    # Computes our model's predicted output\n    yhat = a + b * x_train\n    \n    # How wrong is our model? That's the error! \n    error = (y_train - yhat)\n    \n    # It is a regression, so it computes mean squared error (MSE)\n    loss = (error ** 2).mean()\n    \n    # Computes gradients for both \"a\" and \"b\" parameters\n    a_grad = -2 * error.mean()\n    b_grad = -2 * (x_train * error).mean()\n    \n    # Updates parameters using gradients and the learning rate\n    a = a - lr * a_grad\n    b = b - lr * b_grad\n    \nprint(a, b)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":230,"status":"ok","timestamp":1627499222901,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"IEGhbnhoa-sQ","outputId":"6df14990-801c-4030-bd27-e2c19b95c577"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02268046] [1.97060203]\n"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9edfb8","input":"plt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the validation set \nplt.subplot(1,2,2)\nplt.scatter(x_val,x_val)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"executionInfo":{"elapsed":524,"status":"ok","timestamp":1627498583872,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"W1JhyZ_Na-sM","outputId":"909f5fd9-c203-45cf-d41f-58b09bb727ef"},"output":{"0":{"data":{"image/png":"f075f4d1128da421683b3b7123675e91e79d107a","text/plain":"<Figure size 720x360 with 2 Axes>"},"exec_count":4,"metadata":{"needs_background":"light","tags":[]},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"99549a","input":"plt.figures(figsize=(10,5))\n\n\ny_pred = a + b * x_test\n\nplt.plot(x_test, y = pred, '--'\n\nplt.scatter(x_test, y_test, c='orange')","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-46-6055f3dac607>, line 8)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-46-6055f3dac607>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    plt.scatter(x_test, y_test, c='orange')\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"663426","input":"from sklearn.linear_model import LinearRegression\nlinr = LinearRegression()\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":885,"status":"ok","timestamp":1627498630865,"user":{"displayName":"Fernanda Murillo","photoUrl":"","userId":"17562885266255337733"},"user_tz":600},"id":"jkPf0bt4a-sV","outputId":"422ab4c2-fceb-490e-ca2d-b45f09b26cff"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02267993] [1.97060307]\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"8d710f","input":"linr = LinearRegression()","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"ac1660","input":"linr.fit(x_train, y_train)","output":{"0":{"data":{"text/plain":"LinearRegression()"},"exec_count":49,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"4ef466","input":"print(linr.intercept_, linr.coef_[0])","output":{"0":{"name":"stdout","output_type":"stream","text":"[1.02267993] [1.97060307]\n"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"ea6386","input":"plt.figure(figsize=(10, 5))\n\ny_pred = linr.intercept_ + linr.coef_[0] * x_test\n\nplt.plot(x_test, y_pred, '--')\n\nplt.scatter(x_test, y_test, c='orange')\n\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\nplt.show()","metadata":{"id":"mdxlUKLka-sZ"},"output":{"0":{"data":{"image/png":"89f16bd96ec12513e181651fe3abe4521abb4b2b","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":62,"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"},"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"02bfc9","input":"# Linear regression using NumPy","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"17aa02","input":"## check our results use Scikit-learn's linear regression\n\nJust to make sure we haven’t done any mistakes in our code, we can use Scikit-Learn’s Linear Regression to fit the model and compare the coefficients.\n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"34b90b","input":"### For each epoch, there are 5 training steps:\n* Compute model’s predictions \n* Compute the error (the difference between the actual value and predicted value) \n* Compute the loss ( mean square error = the average of (error)^2)\n* Compute the gradients for every parameter (require calculus)\n* Update the parameters a and b","metadata":{"id":"Tmk5nl_Va-sQ"},"pos":28,"type":"cell"}
{"cell_type":"markdown","id":"430e36","input":"## plot the train and validation sets","metadata":{"id":"DCCwyhkya-sM"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"7e6d5d","input":"## The results!\n\nThey match up to 6 decimal places — we have a fully working implementation of linear regression using Numpy.","metadata":{"id":"yE4V3P9aa-sX"},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"b483c5","input":"## linear regression using numpy ","metadata":{"id":"gi4pQP8Ia-sO"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"e29666","input":"## split data into train and validation\\(or test\\) sets \\(80/20\\)\n\n","metadata":{"id":"irEOBQoca-sL"},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"e3c1b3","input":"## Data Generation","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"id":0,"time":1657646056205,"type":"user"}
{"last_load":1657645749338,"type":"file"}