{"backend_state":"init","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-89f5f6be-9673-42d9-b1ab-b7cce5f9ab2e.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0a0348","input":"# y_hat is the predicted value of y","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"18c80d","input":"","pos":80,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"24290d","input":"","pos":85,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2a09c1","input":"","pos":82,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"33314e","input":"confusion_matrix = metrics.confusion_matrix(y_test, y_hat)\n\ncm_display = metrice.ConfusionMatrixDisplay(confusion_matrix - confusion_matrix, display_labels = [\"low\", \"high\"])\n\ncm_display.plot\n\nplt.show()","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"35ac48","input":"","pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4643bc","input":"y_test","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"485f40","input":"","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4d0986","input":"# for mpg value lower than 20, it'll be labled as low\n\n# for mpg higher than 20, we'll label ir as high","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"59efbd","input":"","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"753136","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"b183aad68e9d92822d562b2d62bac4ab20c205c4","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":0,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"817751","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9124f8","input":"","pos":79,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"972595","input":"","pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ac9a25","input":"","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"afa67b","input":"","pos":83,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bf633e","input":"y_hat = clf.predict(x_test)\ny_hat","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c41fbc","input":"","pos":81,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d41a7f","input":"print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.5749959307112218\n"}},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e6e4d0","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[39.36562799] [-0.15297545]\n"}},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f1db3b","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f3665f","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"7.756195456791836"},"exec_count":0,"output_type":"execute_result"}},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"11aa38","input":"X","output":{"0":{"data":{"text/plain":"array([130., 165., 150., 150., 140., 198., 220., 215., 225., 190., 170.,\n       160., 150., 225.,  95.,  95.,  97.,  85.,  88.,  46.,  87.,  90.,\n        95., 113.,  90., 215., 200., 210., 193.,  88.,  90.,  95., 100.,\n       105., 100.,  88., 100., 165., 175., 153., 150., 180., 170., 175.,\n       110.,  72., 100.,  88.,  86.,  90.,  70.,  76.,  65.,  69.,  60.,\n        70.,  95.,  80.,  54.,  90.,  86., 165., 175., 150., 153., 150.,\n       208., 155., 160., 190.,  97., 150., 130., 140., 150., 112.,  76.,\n        87.,  69.,  86.,  92.,  97.,  80.,  88., 175., 150., 145., 137.,\n       150., 198., 150., 158., 150., 215., 225., 175., 105., 100., 100.,\n        88.,  95.,  46., 150., 167., 170., 180., 100.,  88.,  72.,  94.,\n        90.,  85., 107.,  90., 145., 230.,  49.,  75.,  91., 112., 150.,\n       110., 122., 180.,  95., 100., 100.,  67.,  80.,  65.,  75., 100.,\n       110., 105., 140., 150., 150., 140., 150.,  83.,  67.,  78.,  52.,\n        61.,  75.,  75.,  75.,  97.,  93.,  67.,  95., 105.,  72.,  72.,\n       170., 145., 150., 148., 110., 105., 110.,  95., 110., 110., 129.,\n        75.,  83., 100.,  78.,  96.,  71.,  97.,  97.,  70.,  90.,  95.,\n        88.,  98., 115.,  53.,  86.,  81.,  92.,  79.,  83., 140., 150.,\n       120., 152., 100., 105.,  81.,  90.,  52.,  60.,  70.,  53., 100.,\n        78., 110.,  95.,  71.,  70.,  75.,  72., 102., 150.,  88., 108.,\n       120., 180., 145., 130., 150.,  68.,  80.,  58.,  96.,  70., 145.,\n       110., 145., 130., 110., 105., 100.,  98., 180., 170., 190., 149.,\n        78.,  88.,  75.,  89.,  63.,  83.,  67.,  78.,  97., 110., 110.,\n        48.,  66.,  52.,  70.,  60., 110., 140., 139., 105.,  95.,  85.,\n        88., 100.,  90., 105.,  85., 110., 120., 145., 165., 139., 140.,\n        68.,  95.,  97.,  75.,  95., 105.,  85.,  97., 103., 125., 115.,\n       133.,  71.,  68., 115.,  85.,  88.,  90., 110., 130., 129., 138.,\n       135., 155., 142., 125., 150.,  71.,  65.,  80.,  80.,  77., 125.,\n        71.,  90.,  70.,  70.,  65.,  69.,  90., 115., 115.,  90.,  76.,\n        60.,  70.,  65.,  90.,  88.,  90.,  90.,  78.,  90.,  75.,  92.,\n        75.,  65., 105.,  65.,  48.,  48.,  67.,  67.,  67.,  67.,  62.,\n       132., 100.,  88.,  72.,  84.,  84.,  92., 110.,  84.,  58.,  64.,\n        60.,  67.,  65.,  62.,  68.,  63.,  65.,  65.,  74.,  75.,  75.,\n       100.,  74.,  80.,  76., 116., 120., 110., 105.,  88.,  85.,  88.,\n        88.,  88.,  85.,  84.,  90.,  92.,  74.,  68.,  68.,  63.,  70.,\n        88.,  75.,  70.,  67.,  67.,  67., 110.,  85.,  92., 112.,  96.,\n        84.,  90.,  86.,  52.,  84.,  79.,  82.])"},"exec_count":11,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"2d5f27","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"871c81","input":"y","output":{"0":{"data":{"text/plain":"array([18. , 15. , 18. , 16. , 17. , 15. , 14. , 14. , 14. , 15. , 15. ,\n       14. , 15. , 14. , 24. , 22. , 18. , 21. , 27. , 26. , 25. , 24. ,\n       25. , 26. , 21. , 10. , 10. , 11. ,  9. , 27. , 28. , 25. , 19. ,\n       16. , 17. , 19. , 18. , 14. , 14. , 14. , 14. , 12. , 13. , 13. ,\n       18. , 22. , 19. , 18. , 23. , 28. , 30. , 30. , 31. , 35. , 27. ,\n       26. , 24. , 25. , 23. , 20. , 21. , 13. , 14. , 15. , 14. , 17. ,\n       11. , 13. , 12. , 13. , 19. , 15. , 13. , 13. , 14. , 18. , 22. ,\n       21. , 26. , 22. , 28. , 23. , 28. , 27. , 13. , 14. , 13. , 14. ,\n       15. , 12. , 13. , 13. , 14. , 13. , 12. , 13. , 18. , 16. , 18. ,\n       18. , 23. , 26. , 11. , 12. , 13. , 12. , 18. , 20. , 21. , 22. ,\n       18. , 19. , 21. , 26. , 15. , 16. , 29. , 24. , 20. , 19. , 15. ,\n       24. , 20. , 11. , 20. , 19. , 15. , 31. , 26. , 32. , 25. , 16. ,\n       16. , 18. , 16. , 13. , 14. , 14. , 14. , 29. , 26. , 26. , 31. ,\n       32. , 28. , 24. , 26. , 24. , 26. , 31. , 19. , 18. , 15. , 15. ,\n       16. , 15. , 16. , 14. , 17. , 16. , 15. , 18. , 21. , 20. , 13. ,\n       29. , 23. , 20. , 23. , 24. , 25. , 24. , 18. , 29. , 19. , 23. ,\n       23. , 22. , 25. , 33. , 28. , 25. , 25. , 26. , 27. , 17.5, 16. ,\n       15.5, 14.5, 22. , 22. , 24. , 22.5, 29. , 24.5, 29. , 33. , 20. ,\n       18. , 18.5, 17.5, 29.5, 32. , 28. , 26.5, 20. , 13. , 19. , 19. ,\n       16.5, 16.5, 13. , 13. , 13. , 31.5, 30. , 36. , 25.5, 33.5, 17.5,\n       17. , 15.5, 15. , 17.5, 20.5, 19. , 18.5, 16. , 15.5, 15.5, 16. ,\n       29. , 24.5, 26. , 25.5, 30.5, 33.5, 30. , 30.5, 22. , 21.5, 21.5,\n       43.1, 36.1, 32.8, 39.4, 36.1, 19.9, 19.4, 20.2, 19.2, 20.5, 20.2,\n       25.1, 20.5, 19.4, 20.6, 20.8, 18.6, 18.1, 19.2, 17.7, 18.1, 17.5,\n       30. , 27.5, 27.2, 30.9, 21.1, 23.2, 23.8, 23.9, 20.3, 17. , 21.6,\n       16.2, 31.5, 29.5, 21.5, 19.8, 22.3, 20.2, 20.6, 17. , 17.6, 16.5,\n       18.2, 16.9, 15.5, 19.2, 18.5, 31.9, 34.1, 35.7, 27.4, 25.4, 23. ,\n       27.2, 23.9, 34.2, 34.5, 31.8, 37.3, 28.4, 28.8, 26.8, 33.5, 41.5,\n       38.1, 32.1, 37.2, 28. , 26.4, 24.3, 19.1, 34.3, 29.8, 31.3, 37. ,\n       32.2, 46.6, 27.9, 40.8, 44.3, 43.4, 36.4, 30. , 44.6, 33.8, 29.8,\n       32.7, 23.7, 35. , 32.4, 27.2, 26.6, 25.8, 23.5, 30. , 39.1, 39. ,\n       35.1, 32.3, 37. , 37.7, 34.1, 34.7, 34.4, 29.9, 33. , 33.7, 32.4,\n       32.9, 31.6, 28.1, 30.7, 25.4, 24.2, 22.4, 26.6, 20.2, 17.6, 28. ,\n       27. , 34. , 31. , 29. , 27. , 24. , 36. , 37. , 31. , 38. , 36. ,\n       36. , 36. , 34. , 38. , 32. , 38. , 25. , 38. , 26. , 22. , 32. ,\n       36. , 27. , 27. , 44. , 32. , 28. , 31. ])"},"exec_count":13,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"597720","input":"X = my_data[[\"horsepower\", \"acceleration\"]].to_numpy()","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"801db5","input":"X.shape","output":{"0":{"data":{"text/plain":"(392,)"},"exec_count":16,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"e126ea","input":"y.shape","output":{"0":{"data":{"text/plain":"(392,)"},"exec_count":17,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"42dca4","input":"my_data[\"mpg\"].min()","output":{"0":{"data":{"text/plain":"9.0"},"exec_count":18,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"3fe92b","input":"my_data[\"mpg\"].max()","output":{"0":{"data":{"text/plain":"46.6"},"exec_count":19,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"5c3714","input":"idx = np.arange(len(X))","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"d13d27","input":"idx","output":{"0":{"data":{"text/plain":"array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,\n        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,\n        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,\n       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\n       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,\n       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,\n       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,\n       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,\n       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,\n       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,\n       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,\n       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,\n       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,\n       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,\n       390, 391])"},"exec_count":20,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"f50d33","input":"my_data[\"mpg\"].mean()","output":{"0":{"data":{"text/plain":"23.445918367346938"},"exec_count":20,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"2db530","input":"def divide_mpg(x):\n    if x <= 20:\n        return \"low\"\n    else:\n        return \"high\"\n","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"4c67dc","input":"my_data[\"mpg\"].apply(divide_mpg)","output":{"0":{"data":{"text/plain":"0       low\n1       low\n2       low\n3       low\n4       low\n       ... \n387    high\n388    high\n389    high\n390    high\n391    high\nName: mpg, Length: 392, dtype: object"},"exec_count":22,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"688d35","input":"np.random.shuffle(idx)","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"45f54a","input":"idx","output":{"0":{"data":{"text/plain":"array([269, 367, 366, 347, 120, 208, 350, 262,   2, 340, 257,  87,  55,\n       164, 113, 358, 324, 259, 197,  65, 277, 118, 151, 315, 124,  21,\n        35,  72,   9, 224, 210, 178, 291,  50, 296, 258,  93, 275, 237,\n       336, 233, 308, 204, 132, 314,  24, 338, 302, 141, 202, 286, 253,\n       284, 143, 244, 146, 326,  90, 142, 209, 126,  77, 345, 227,  59,\n       334, 228, 356, 147, 136, 122, 368,  57, 282, 300, 323, 226, 380,\n       145,   0, 248, 297, 102,  12, 155, 160, 107, 279, 325,  79,  41,\n        17, 125, 212, 100,  63,  25, 135,  84, 298,  53, 205,  66, 264,\n       187,  32,  15, 346, 214, 105, 267, 304, 290,  81,  85, 301,  33,\n       316,  71,  14, 280,  30, 188, 157, 117, 251, 119, 332, 137, 217,\n        18, 313,  29, 190, 281, 112,  60, 240,   4,   5,  20,  40, 171,\n       185, 193, 270,  78, 321, 305, 361, 166, 351, 285, 184, 121,  31,\n       174, 158, 317, 294, 129, 343, 246, 154, 108,  88, 123, 131, 182,\n       255, 153,  56, 243,  99, 272,  67, 383,  96, 375, 371,  97,  42,\n       241, 220, 276,  89, 211,  86, 169,  73,  36, 335,  26, 232,  47,\n       149, 373, 312, 128, 200,  58, 139,  98, 303, 127, 110,  16,  51,\n        92, 341, 306,  23, 252, 319, 369, 106,  39, 194, 344, 221, 238,\n       271,   3, 234,  74, 215, 101, 376, 207, 109, 206, 374, 192, 385,\n       173,  48, 161,  95,  45,  75, 223, 167,   6, 103, 309, 213, 104,\n       283, 130, 250, 152, 388, 364, 328, 203,  52, 168, 353, 299, 260,\n       295,  62, 172,  19, 186, 389,  69, 195, 318,  64, 329,  83, 382,\n       370, 363, 386, 231, 349, 348, 354, 115,  91,   1,  38, 311, 327,\n       362, 357, 179, 337, 292, 266, 245, 330, 198, 307, 293, 114, 289,\n        70, 230, 333,  68, 196, 384, 177, 360, 133, 138, 239,  61,  46,\n        27, 176,  76, 352, 222, 159,   8, 265, 278, 391,  94, 331, 249,\n       274, 236,  80, 134,  13, 235, 268, 218,  34, 219,  28, 387, 180,\n       288,  82, 116,  22, 191, 181, 242, 144,  10, 140, 378, 377, 261,\n       339, 201,  37, 359, 189, 148, 163, 247, 183, 322,  11, 175, 379,\n        43, 199, 263, 381, 162, 355, 170, 165, 111, 273, 342, 150, 254,\n       310, 229, 390, 287,  44, 216, 225,  54, 320,   7, 365, 256, 372,\n       156,  49])"},"exec_count":24,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"48b236","input":"len(X) * 0.8","output":{"0":{"data":{"text/plain":"313.6"},"exec_count":25,"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"853cd1","input":"split_threshold = int(len(X) * 0.8)\nsplit_threshold","output":{"0":{"data":{"text/plain":"313"},"exec_count":26,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"e14889","input":"y = my_data[\"mpg\"].to_numpy()","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"b7960c","input":"train_idx = idx[:split_threshold]","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"b569ab","input":"idx = np.arange(len(X))\nnp.random.shuffle(idx)\n\nsplit_threshold = int(len(X) * 0.8)","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"4d003f","input":"x_train = X[:split_threshold]\nx_test = X[split_threshold:]\n\ny_train = y[:split_threshold]\ny_test = y[split_threshold]","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"71a99c","input":"test_idx = idx[split_threshold:]","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"2ec982","input":"X_train = X[train_idx]","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"9623a8","input":"X_train","output":{"0":{"data":{"text/plain":"array([105.,  90.,  84.,  65., 150., 108.,  75., 139., 150.,  64.,  85.,\n       137.,  70., 129.,  90., 110.,  48., 120., 100., 150.,  68.,  91.,\n       105.,  78.,  95.,  90.,  88., 130., 190., 105., 180., 115.,  71.,\n        70., 125., 110., 215., 133.,  67.,  92.,  75.,  60.,  72., 110.,\n        90.,  90.,  84.,  69.,  78.,  70., 135.,  88., 129.,  61.,  52.,\n        75.,  67., 150.,  52., 120., 100.,  87.,  68., 180.,  90.,  84.,\n       170., 116.,  97., 150., 122.,  92.,  80., 110.,  70.,  48.,  98.,\n       110.,  75., 130., 140.,  71., 150., 150., 145., 110.,  88.,  85.,\n        67.,  86., 180.,  85., 100., 130.,  95., 150., 215., 150., 175.,\n        90.,  69., 102., 208.,  68., 120., 100.,  95.,  63.,  68., 180.,\n        75., 115., 150.,  97., 150.,  65., 105.,  90., 150.,  95.,  88.,\n        90., 152., 148.,  75.,  95., 112.,  88., 140.,  96.,  88.,  90.,\n        88., 105.,  90., 107.,  86., 110., 140., 198.,  87., 150.,  97.,\n       140.,  52.,  85.,  69., 105., 115.,  85.,  83.,  75., 138.,  83.,\n       110.,  95.,  90., 110.,  75.,  80.,  65.,  65.,  60., 170.,  72.,\n       150., 180., 100.,  92.,  90.,  72.,  95.,  66.,  88., 103., 155.,\n       112., 105.,  75.,  68., 100., 170., 110., 110.,  71., 198., 145.,\n       145.,  96., 140., 100.,  84., 200.,  88.,  88.,  67.,  70.,  88.,\n        80.,  95.,  54.,  83., 100.,  90.,  67.,  90.,  97.,  76., 150.,\n        60.,  90., 113.,  85.,  75.,  74., 100., 153.,  60.,  62., 145.,\n        78.,  97., 150.,  89., 150.,  80.,  46.,  70.,  88.,  94., 150.,\n        88.,  90.,  84.,  70.,  86.,  95., 175.,  72., 112., 110., 100.,\n       220., 167.,  70., 150., 170., 130.,  75., 105.,  72.,  52.,  88.,\n        67.,  75.,  65.,  78.,  74.,  70., 145.,  77., 175.,  97.,  46.,\n       150.,  84., 190.,  70.,  92., 153.,  62.,  88.,  92.,  68.,  88.,\n        90.,  78.,  74.,  65.,  80., 230., 158., 165., 175.,  90.,  67.,\n        88., 120.,  53., 110.,  65.,  97.,  70., 132.,  78.,  76.,  80.,\n       145., 125.,  97., 149.,  72., 160.,  53.,  96.,  98.,  88., 105.,\n       150.,  97., 165., 100., 210.])"},"exec_count":35,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"8188ce","input":"y_train = y[train_idx]","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"6f4540","input":"X_test = X[test_idx]","pos":53,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"a057e1","input":"y_test = y[train_idx]","pos":54,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"0494a2","input":"from sklearn.linear_model import LinearRegression\n","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"1d90b0","input":"clf = svm.SVC()","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"5c12a8","input":"#Create the model object\nlinr = LinearRegression()","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"1a11be","input":"clf.fit(x_train, y_train)","output":{"0":{"ename":"ValueError","evalue":"Unknown label type: 'continuous'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-5c93c534242c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    197\u001b[0m             )\n\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m         sample_weight = np.asarray(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_validate_targets\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    714\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    715\u001b[0m         \u001b[0my_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolumn_or_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 716\u001b[0;31m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    717\u001b[0m         \u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_inverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_class_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36mcheck_classification_targets\u001b[0;34m(y)\u001b[0m\n\u001b[1;32m    195\u001b[0m         \u001b[0;34m\"multilabel-sequences\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m     ]:\n\u001b[0;32m--> 197\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Unknown label type: %r\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unknown label type: 'continuous'"]}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"6377f6","input":"type(linr)","output":{"0":{"data":{"text/plain":"sklearn.linear_model._base.LinearRegression"},"exec_count":41,"output_type":"execute_result"}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"9482bc","input":"clf.predict(x_test)","output":{"0":{"ename":"AttributeError","evalue":"'SVC' object has no attribute 'support_vectors_'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-e8cc7e3e3ae6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    789\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    790\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 791\u001b[0;31m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    792\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    412\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m         \"\"\"\n\u001b[0;32m--> 414\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_for_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    415\u001b[0m         \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sparse_predict\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sparse\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dense_predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_validate_for_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    619\u001b[0m         \u001b[0;31m# Fixes https://nvd.nist.gov/vuln/detail/CVE-2020-28975\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    620\u001b[0m         \u001b[0;31m# Check that _n_support is consistent with support_vectors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 621\u001b[0;31m         \u001b[0msv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msupport_vectors_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    622\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sparse\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0msv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_support_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0msv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m             raise ValueError(\n","\u001b[0;31mAttributeError\u001b[0m: 'SVC' object has no attribute 'support_vectors_'"]}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"17e06a","input":"from sklearn import metrics","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"0f0bc5","input":"x_train.reshape(-1, 1)","output":{"0":{"data":{"text/plain":"array([[105.],\n       [ 90.],\n       [ 84.],\n       [ 65.],\n       [150.],\n       [108.],\n       [ 75.],\n       [139.],\n       [150.],\n       [ 64.],\n       [ 85.],\n       [137.],\n       [ 70.],\n       [129.],\n       [ 90.],\n       [110.],\n       [ 48.],\n       [120.],\n       [100.],\n       [150.],\n       [ 68.],\n       [ 91.],\n       [105.],\n       [ 78.],\n       [ 95.],\n       [ 90.],\n       [ 88.],\n       [130.],\n       [190.],\n       [105.],\n       [180.],\n       [115.],\n       [ 71.],\n       [ 70.],\n       [125.],\n       [110.],\n       [215.],\n       [133.],\n       [ 67.],\n       [ 92.],\n       [ 75.],\n       [ 60.],\n       [ 72.],\n       [110.],\n       [ 90.],\n       [ 90.],\n       [ 84.],\n       [ 69.],\n       [ 78.],\n       [ 70.],\n       [135.],\n       [ 88.],\n       [129.],\n       [ 61.],\n       [ 52.],\n       [ 75.],\n       [ 67.],\n       [150.],\n       [ 52.],\n       [120.],\n       [100.],\n       [ 87.],\n       [ 68.],\n       [180.],\n       [ 90.],\n       [ 84.],\n       [170.],\n       [116.],\n       [ 97.],\n       [150.],\n       [122.],\n       [ 92.],\n       [ 80.],\n       [110.],\n       [ 70.],\n       [ 48.],\n       [ 98.],\n       [110.],\n       [ 75.],\n       [130.],\n       [140.],\n       [ 71.],\n       [150.],\n       [150.],\n       [145.],\n       [110.],\n       [ 88.],\n       [ 85.],\n       [ 67.],\n       [ 86.],\n       [180.],\n       [ 85.],\n       [100.],\n       [130.],\n       [ 95.],\n       [150.],\n       [215.],\n       [150.],\n       [175.],\n       [ 90.],\n       [ 69.],\n       [102.],\n       [208.],\n       [ 68.],\n       [120.],\n       [100.],\n       [ 95.],\n       [ 63.],\n       [ 68.],\n       [180.],\n       [ 75.],\n       [115.],\n       [150.],\n       [ 97.],\n       [150.],\n       [ 65.],\n       [105.],\n       [ 90.],\n       [150.],\n       [ 95.],\n       [ 88.],\n       [ 90.],\n       [152.],\n       [148.],\n       [ 75.],\n       [ 95.],\n       [112.],\n       [ 88.],\n       [140.],\n       [ 96.],\n       [ 88.],\n       [ 90.],\n       [ 88.],\n       [105.],\n       [ 90.],\n       [107.],\n       [ 86.],\n       [110.],\n       [140.],\n       [198.],\n       [ 87.],\n       [150.],\n       [ 97.],\n       [140.],\n       [ 52.],\n       [ 85.],\n       [ 69.],\n       [105.],\n       [115.],\n       [ 85.],\n       [ 83.],\n       [ 75.],\n       [138.],\n       [ 83.],\n       [110.],\n       [ 95.],\n       [ 90.],\n       [110.],\n       [ 75.],\n       [ 80.],\n       [ 65.],\n       [ 65.],\n       [ 60.],\n       [170.],\n       [ 72.],\n       [150.],\n       [180.],\n       [100.],\n       [ 92.],\n       [ 90.],\n       [ 72.],\n       [ 95.],\n       [ 66.],\n       [ 88.],\n       [103.],\n       [155.],\n       [112.],\n       [105.],\n       [ 75.],\n       [ 68.],\n       [100.],\n       [170.],\n       [110.],\n       [110.],\n       [ 71.],\n       [198.],\n       [145.],\n       [145.],\n       [ 96.],\n       [140.],\n       [100.],\n       [ 84.],\n       [200.],\n       [ 88.],\n       [ 88.],\n       [ 67.],\n       [ 70.],\n       [ 88.],\n       [ 80.],\n       [ 95.],\n       [ 54.],\n       [ 83.],\n       [100.],\n       [ 90.],\n       [ 67.],\n       [ 90.],\n       [ 97.],\n       [ 76.],\n       [150.],\n       [ 60.],\n       [ 90.],\n       [113.],\n       [ 85.],\n       [ 75.],\n       [ 74.],\n       [100.],\n       [153.],\n       [ 60.],\n       [ 62.],\n       [145.],\n       [ 78.],\n       [ 97.],\n       [150.],\n       [ 89.],\n       [150.],\n       [ 80.],\n       [ 46.],\n       [ 70.],\n       [ 88.],\n       [ 94.],\n       [150.],\n       [ 88.],\n       [ 90.],\n       [ 84.],\n       [ 70.],\n       [ 86.],\n       [ 95.],\n       [175.],\n       [ 72.],\n       [112.],\n       [110.],\n       [100.],\n       [220.],\n       [167.],\n       [ 70.],\n       [150.],\n       [170.],\n       [130.],\n       [ 75.],\n       [105.],\n       [ 72.],\n       [ 52.],\n       [ 88.],\n       [ 67.],\n       [ 75.],\n       [ 65.],\n       [ 78.],\n       [ 74.],\n       [ 70.],\n       [145.],\n       [ 77.],\n       [175.],\n       [ 97.],\n       [ 46.],\n       [150.],\n       [ 84.],\n       [190.],\n       [ 70.],\n       [ 92.],\n       [153.],\n       [ 62.],\n       [ 88.],\n       [ 92.],\n       [ 68.],\n       [ 88.],\n       [ 90.],\n       [ 78.],\n       [ 74.],\n       [ 65.],\n       [ 80.],\n       [230.],\n       [158.],\n       [165.],\n       [175.],\n       [ 90.],\n       [ 67.],\n       [ 88.],\n       [120.],\n       [ 53.],\n       [110.],\n       [ 65.],\n       [ 97.],\n       [ 70.],\n       [132.],\n       [ 78.],\n       [ 76.],\n       [ 80.],\n       [145.],\n       [125.],\n       [ 97.],\n       [149.],\n       [ 72.],\n       [160.],\n       [ 53.],\n       [ 96.],\n       [ 98.],\n       [ 88.],\n       [105.],\n       [150.],\n       [ 97.],\n       [165.],\n       [100.],\n       [210.]])"},"exec_count":49,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9f45ab","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\n\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"4e9595","input":"x_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","pos":56,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"d57789","input":"linr.fit(x_train, y_train)","output":{"0":{"data":{"text/plain":"LinearRegression()"},"exec_count":52,"output_type":"execute_result"}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"66e0aa","input":"# Predicting using SKLearn\n\n#y_hat is the predicted value of y_test\n\ny_hat = linr.predict(x_test)\n\n#y = 39.36562799 + (-0.15297545 * x)","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"0f7ef0","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fadd55db2e0>]"},"exec_count":55,"output_type":"execute_result"},"1":{"data":{"image/png":"295c874ed85fc222f029db20ad13571aa0eed3ce","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":55,"metadata":{"image/png":{"height":302,"width":592},"needs_background":"light"},"output_type":"execute_result"}},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"0a71ff","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","output":{"0":{"ename":"ValueError","evalue":"x and y must be the same size","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-57-4bc92e60096a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2834\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2835\u001b[0m         edgecolors=None, *, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2836\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2837\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2838\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1600\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1601\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1603\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4441\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4443\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"1":{"data":{"image/png":"295c874ed85fc222f029db20ad13571aa0eed3ce","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":57,"metadata":{"image/png":{"height":302,"width":592},"needs_background":"light"},"output_type":"execute_result"}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"5b5cbf","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"b34401","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fadda138d00>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"0afdb7ea88e663b1d2b006d7c5528ae073007949","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":415,"width":714},"needs_background":"light"},"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"2671f9","input":"","pos":77,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"31b243","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d979b0","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","metadata":{"id":"WW77IzOwZaKp"},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"91d2c6","input":"","output":{"0":{"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'NKI_cleaned.csv'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-70-df3273599561>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"NKI_cleaned.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    678\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    679\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 680\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    681\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 575\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    576\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    577\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    931\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 933\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    934\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    935\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1215\u001b[0m             \u001b[0;31m# \"Union[str, PathLike[str], ReadCsvBuffer[bytes], ReadCsvBuffer[str]]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1216\u001b[0m             \u001b[0;31m# , \"str\", \"bool\", \"Any\", \"Any\", \"Any\", \"Any\", \"Any\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1217\u001b[0;31m             self.handles = get_handle(  # type: ignore[call-overload]\n\u001b[0m\u001b[1;32m   1218\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1219\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    787\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    788\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 789\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    790\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'NKI_cleaned.csv'"]}},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"03eb59","input":"from sklearn import svm","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b66e9d","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","metadata":{"id":"wKS4pvcEsLOF"},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"f0791e","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"b5865628a66c96904adaeb9cf5d43e8a1c8a857b","text/plain":"<Figure size 720x360 with 2 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"},"output_type":"execute_result"}},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"029b33","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"45a012","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"63cc86","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"6ab0b4","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"84b117","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n\n","metadata":{"id":"w78dUshNZarz"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"8719c3","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"8c097a","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"9e1c4e","input":"**SVM**\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"a58b2c","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"c6323b","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"e694d6","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"eebe69","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"f3d38d","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"fdc0e4","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":60,"type":"cell"}
{"id":0,"time":1657215371909,"type":"user"}
{"last_load":1657254071826,"type":"file"}