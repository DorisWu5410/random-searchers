{"backend_state":"running","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-975b2d7c-74c4-4ed7-b310-78791d7f247d.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657648825123,"exec_count":1,"id":"e776f2","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1657648824586,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648828311,"exec_count":2,"id":"72ab2a","input":"df = pd.read_csv(\"../../../NKI_cleaned.csv\")","kernel":"python3-ubuntu","pos":3,"start":1657648828051,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648834619,"exec_count":3,"id":"c78de2","input":"df.tail()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>...</th>\n      <th>Contig36312_RC</th>\n      <th>Contig38980_RC</th>\n      <th>NM_000853</th>\n      <th>NM_000854</th>\n      <th>NM_000860</th>\n      <th>Contig29014_RC</th>\n      <th>Contig46616_RC</th>\n      <th>NM_000888</th>\n      <th>NM_000898</th>\n      <th>AF067420</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>267</th>\n      <td>s71</td>\n      <td>308</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2.6083</td>\n      <td>1.982204</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.695745</td>\n      <td>-0.076025</td>\n      <td>0.201054</td>\n      <td>-0.108361</td>\n      <td>0.222534</td>\n      <td>-0.471391</td>\n      <td>0.026301</td>\n      <td>0.476758</td>\n      <td>-0.468408</td>\n      <td>-0.843889</td>\n    </tr>\n    <tr>\n      <th>268</th>\n      <td>s72</td>\n      <td>309</td>\n      <td>39</td>\n      <td>1</td>\n      <td>5.5041</td>\n      <td>3.028063</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.743322</td>\n      <td>0.108220</td>\n      <td>0.083472</td>\n      <td>-0.859677</td>\n      <td>-0.551512</td>\n      <td>-0.191424</td>\n      <td>-0.844488</td>\n      <td>-0.357929</td>\n      <td>-0.585760</td>\n      <td>0.169989</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>s73</td>\n      <td>310</td>\n      <td>50</td>\n      <td>1</td>\n      <td>2.6192</td>\n      <td>2.149213</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.778710</td>\n      <td>0.251779</td>\n      <td>-0.063160</td>\n      <td>0.450576</td>\n      <td>0.452686</td>\n      <td>1.055764</td>\n      <td>0.591880</td>\n      <td>-0.510884</td>\n      <td>0.251903</td>\n      <td>-0.822792</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>s75</td>\n      <td>311</td>\n      <td>52</td>\n      <td>1</td>\n      <td>2.2905</td>\n      <td>2.209446</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.614775</td>\n      <td>-0.417394</td>\n      <td>-0.077948</td>\n      <td>-0.126006</td>\n      <td>-0.841332</td>\n      <td>-0.274742</td>\n      <td>-0.063019</td>\n      <td>-0.396531</td>\n      <td>0.356816</td>\n      <td>0.345088</td>\n    </tr>\n    <tr>\n      <th>271</th>\n      <td>s76</td>\n      <td>312</td>\n      <td>52</td>\n      <td>1</td>\n      <td>3.7370</td>\n      <td>2.127310</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.234388</td>\n      <td>0.181319</td>\n      <td>-0.030782</td>\n      <td>-1.035581</td>\n      <td>-0.521642</td>\n      <td>-0.301661</td>\n      <td>-0.060805</td>\n      <td>0.794952</td>\n      <td>-1.089303</td>\n      <td>-0.326193</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 1570 columns</p>\n</div>","text/plain":"    Patient   ID  age  eventdeath  survival  timerecurrence  chemo  hormonal  \\\n267     s71  308   48           1    2.6083        1.982204      1         0   \n268     s72  309   39           1    5.5041        3.028063      0         0   \n269     s73  310   50           1    2.6192        2.149213      0         0   \n270     s75  311   52           1    2.2905        2.209446      0         1   \n271     s76  312   52           1    3.7370        2.127310      0         0   \n\n     amputation  histtype  ...  Contig36312_RC  Contig38980_RC  NM_000853  \\\n267           1         1  ...       -0.695745       -0.076025   0.201054   \n268           1         1  ...       -0.743322        0.108220   0.083472   \n269           1         1  ...       -0.778710        0.251779  -0.063160   \n270           1         1  ...       -0.614775       -0.417394  -0.077948   \n271           1         1  ...       -0.234388        0.181319  -0.030782   \n\n     NM_000854  NM_000860  Contig29014_RC  Contig46616_RC  NM_000888  \\\n267  -0.108361   0.222534       -0.471391        0.026301   0.476758   \n268  -0.859677  -0.551512       -0.191424       -0.844488  -0.357929   \n269   0.450576   0.452686        1.055764        0.591880  -0.510884   \n270  -0.126006  -0.841332       -0.274742       -0.063019  -0.396531   \n271  -1.035581  -0.521642       -0.301661       -0.060805   0.794952   \n\n     NM_000898  AF067420  \n267  -0.468408 -0.843889  \n268  -0.585760  0.169989  \n269   0.251903 -0.822792  \n270   0.356816  0.345088  \n271  -1.089303 -0.326193  \n\n[5 rows x 1570 columns]"},"exec_count":3}},"pos":4,"start":1657648834598,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648836181,"exec_count":4,"id":"d2d45c","input":"X = df[\"timerecurrence\"].to_numpy()","kernel":"python3-ubuntu","pos":5,"start":1657648836165,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648837359,"exec_count":5,"id":"1b2bfe","input":"y = df[\"survival\"].to_numpy()","kernel":"python3-ubuntu","pos":6,"start":1657648837350,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648838668,"exec_count":6,"id":"59c97b","input":"X.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":6}},"pos":7,"start":1657648838650,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648840219,"exec_count":7,"id":"1eeeac","input":"y.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":7}},"pos":8,"start":1657648840210,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648842268,"exec_count":8,"id":"969f3d","input":"idx = np.arange(len(X)) ","kernel":"python3-ubuntu","pos":10,"start":1657648842259,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648843254,"exec_count":9,"id":"007a24","input":"np.random.shuffle(idx)","kernel":"python3-ubuntu","pos":11,"start":1657648843248,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648844397,"exec_count":10,"id":"91bb95","input":"idx","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([137,  51, 106, 183, 102, 176, 226,  13,  48, 114, 244,  56,  10,\n       152, 172,   1, 156, 262, 182,  30,  28,  94, 196, 135, 270, 103,\n        67,   5, 261, 214, 233, 149, 195, 187,  83, 167, 249, 225,  45,\n       268, 215,  49, 191, 203, 169, 189, 237, 201, 153, 208, 128, 124,\n        35,  47, 217, 142,  55,  68,  41,  72,  34, 248, 260, 173, 211,\n       168, 171, 117, 151, 257, 238, 212,  54,  40, 206, 227, 209,  43,\n       236, 120,  71, 219,  93,  33, 259, 115, 157, 242, 139,   7, 105,\n        25,  15, 123,  14,  84,  91, 186,  78, 138, 130, 269, 194, 141,\n        81,  98,   8, 231, 258,  75, 118, 254,  38, 147, 177, 256, 240,\n       228, 127,  69, 148,  46, 104, 267, 205, 241, 264, 234, 247, 235,\n        12,   2, 255, 204,  27,  20, 174,  26,  32,  44, 239, 218,  65,\n       243, 252, 158,   6, 145,  53,  61, 164,  87,  37,  86,  63,  66,\n        64, 220,  29,  21,  88,  60, 251,  31,  97, 192, 175,  18, 170,\n       121,  92,  42, 122,   3,   0,  36, 116, 202,  80, 100, 188,   9,\n       232, 263, 179, 136,  11, 159,  76, 125,   4,  73,  57, 160, 162,\n       198, 266,  79, 224, 229, 112, 110, 200, 197, 246, 163, 216, 132,\n        17, 207, 161,  82, 230, 253, 180, 193,  99,  16, 143, 265, 181,\n       178, 271,  95, 223,  96,  23, 131, 222,  89,  70, 185, 146, 101,\n       119, 210,  50, 126, 150, 140, 199, 113, 133, 221,  59, 154, 129,\n        74,  58,  62, 107, 134,  77, 184, 144,  90,  24, 165,  52, 213,\n        19, 109, 190,  22,  39, 155, 166, 245, 250,  85, 111, 108])"},"exec_count":10}},"pos":12,"scrolled":true,"start":1657648844387,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648845713,"exec_count":11,"id":"90dc00","input":"split_threshold = int(len(X) * 0.8)","kernel":"python3-ubuntu","pos":13,"start":1657648845705,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648846941,"exec_count":12,"id":"0c3b2f","input":"split_threshold","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"217"},"exec_count":12}},"pos":14,"start":1657648846917,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648848237,"exec_count":13,"id":"482c3d","input":"train_idx = idx[:split_threshold]","kernel":"python3-ubuntu","pos":15,"start":1657648848229,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648849320,"exec_count":14,"id":"e7ceb6","input":"test_idx = idx[split_threshold:]","kernel":"python3-ubuntu","pos":16,"start":1657648849313,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648850324,"exec_count":15,"id":"7836f5","input":"x_train = X[train_idx]","kernel":"python3-ubuntu","pos":17,"start":1657648850318,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648851506,"exec_count":16,"id":"91330c","input":"y_train = y[train_idx]","kernel":"python3-ubuntu","pos":18,"start":1657648851499,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648852744,"exec_count":17,"id":"86fbdb","input":"x_test = X[test_idx]","kernel":"python3-ubuntu","pos":19,"start":1657648852736,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648853906,"exec_count":18,"id":"f73b61","input":"y_test = y[test_idx]","kernel":"python3-ubuntu","pos":20,"start":1657648853898,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648855139,"exec_count":19,"id":"c8f19d","input":"x_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","pos":21,"start":1657648855131,"state":"done","type":"cell"}
{"cell_type":"code","end":1657648999376,"exec_count":29,"id":"d989ca","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set\nplt.subplot(1,2,1)\nplt.scatter(x_train, y_train, c='orange')\nplt.xlabel('timerecurrence', fontsize = 20)\nplt.ylabel('survival', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"9dd4b5f4f070528130b69d8b45b36733a652fd2d","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":321},"needs_background":"light"}}},"pos":23,"start":1657648999089,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649061064,"exec_count":30,"id":"a4c5d6","input":"from sklearn.linear_model import LinearRegression\nlinr2 = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr2.fit(x_train, y_train)\n\nprint(linr2.intercept_, linr2.coef_[0])\n","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[1.7418313] [0.86748866]\n"}},"pos":25,"start":1657649060966,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649063133,"exec_count":31,"id":"bdf366","input":"y_hat = linr2.predict(x_test)","kernel":"python3-ubuntu","pos":26,"start":1657649063129,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649064805,"exec_count":32,"id":"7a679e","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat)\n\nplt.scatter(x_test, y_test, c='orange')\n\nplt.xlabel('timereccurrence', fontsize = 20) \nplt.ylabel('survival', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"a1a7db4d3b2da9dc3eff9a278bccdebc2be7a448","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":616},"needs_background":"light"}}},"pos":27,"start":1657649064501,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649076094,"exec_count":33,"id":"d9b90b","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\n\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":35,"start":1657649075941,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649082170,"exec_count":34,"id":"6cb34a","input":"my_data[\"mpg\"].apply(divide_weight)","kernel":"python3-ubuntu","output":{"0":{"ename":"NameError","evalue":"name 'divide_weight' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-3b7bd0faa482>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmy_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"mpg\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdivide_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'divide_weight' is not defined"]}},"pos":53,"scrolled":true,"start":1657649082135,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649098323,"exec_count":35,"id":"c70068","input":"X.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":35}},"pos":108,"start":1657649098318,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649099002,"exec_count":36,"id":"5fbc34","input":"y.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":36}},"pos":109,"start":1657649098986,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649100043,"exec_count":37,"id":"ab20c5","input":"idx = np.arange(len(X)) #392","kernel":"python3-ubuntu","pos":110,"start":1657649100026,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649101812,"exec_count":38,"id":"e04adf","input":"idx","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,\n        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,\n        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,\n       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\n       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,\n       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271])"},"exec_count":38}},"pos":112,"start":1657649101807,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649102978,"exec_count":39,"id":"b04da3","input":"np.random.shuffle(idx)","kernel":"python3-ubuntu","pos":113,"start":1657649102969,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649104090,"exec_count":40,"id":"d23950","input":"idx","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([  0, 206, 164, 191,   9, 218, 159, 146,  98,  72, 248,  36, 162,\n       211, 171,  42, 251, 207, 184, 139, 216, 249, 134, 252,  99, 265,\n        65, 117,  74,  71,  25, 241, 221, 173, 228,  54, 205, 268,  85,\n       229, 183, 195, 254, 219, 220, 126,  39,  49, 122,  87, 157,  95,\n       135, 178,  32,  44, 153, 266,  97,  21, 136, 247,  79, 142, 263,\n        75,  55, 200,   7, 188, 121, 125,  82, 108, 167, 256, 148, 107,\n       243, 138,  88, 149,  86, 174, 233, 102,  45, 260, 103,  16, 100,\n       131, 198, 223, 179, 258, 104, 106,  62,  64, 124,  68,  24,  58,\n       237,   4, 238, 181,  84,  50,  37, 192, 109,   6, 269, 144, 156,\n       224, 203, 187,   8,  83, 259, 253, 175, 161, 101,  73,  48, 147,\n        59, 257, 240,  63, 113, 123,  47, 202, 193,  17,  52, 264, 152,\n       230, 133, 160,  29, 127, 245, 176, 204, 166,  19, 129, 185, 150,\n       226, 262, 180, 217,   2, 137, 222, 158, 261,  15, 210, 231, 143,\n        34,  91, 186, 110,  92, 190,  66,  77, 116,  27,  70, 182, 177,\n       209, 111,  30, 255, 145, 130, 215, 155,  18, 213,  51, 168,  90,\n       242, 120, 212,  43,  31, 225, 196, 250,  41,   1, 119,  38,   3,\n        56,  11, 140,  76,  14,  22,  81,  46,  13, 141, 118, 208, 132,\n        23, 236,  89, 227,  33, 239, 235,  40,  93, 246, 170,  57, 169,\n       199,  12,   5,  61,  78,  69, 197, 270, 244,  10,  67, 201,  35,\n        80,  26, 189, 105, 214, 165, 154,  28, 128, 271, 232,  53, 194,\n       115, 114, 172, 234, 151,  20,  94, 267,  60, 163,  96, 112])"},"exec_count":40}},"pos":114,"start":1657649104078,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649104938,"exec_count":41,"id":"686b8e","input":"len(X) * 0.8","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"217.60000000000002"},"exec_count":41}},"pos":115,"start":1657649104932,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649105881,"exec_count":42,"id":"cca461","input":"split_threshold = int(len(X) * 0.8)\nsplit_threshold","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"217"},"exec_count":42}},"pos":116,"start":1657649105866,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649106580,"exec_count":43,"id":"de095e","input":"train_idx = idx[:split_threshold]","kernel":"python3-ubuntu","pos":117,"start":1657649106571,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649107409,"exec_count":44,"id":"275be6","input":"test_idx = idx[split_threshold:]","kernel":"python3-ubuntu","pos":118,"start":1657649107400,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649107987,"exec_count":45,"id":"eb2574","input":"len(test_idx)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"55"},"exec_count":45}},"pos":119,"start":1657649107983,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649108583,"exec_count":46,"id":"7fc3f2","input":"x_train = X[train_idx]","kernel":"python3-ubuntu","pos":120,"start":1657649108579,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649109356,"exec_count":47,"id":"5539f5","input":"x_train","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([14.817248, 18.080767,  6.370979,  6.171116,  1.114305, 13.919233,\n        9.103354,  0.325804,  1.152635, 10.767967, 10.138261, 16.147844,\n        8.240931,  3.258042,  4.621492,  1.612594,  5.804244, 17.486653,\n        3.12115 ,  6.067077, 17.420945,  8.80219 ,  7.340178,  8.167009,\n        1.007529,  4.892539, 11.832991,  8.594114,  3.378445, 10.907598,\n       18.340862,  1.374401,  7.772758,  2.130048,  3.509925, 11.318275,\n        4.971937,  3.028063,  1.716632,  6.171116, 16.591376,  4.843258,\n        7.865845, 13.864476, 12.73922 ,  7.022587, 15.819302,  8.925394,\n        6.9295  ,  9.831622,  9.097878,  3.581109,  5.744011,  7.693361,\n       17.659138, 14.885695, 10.201232,  0.807666,  6.516085, 14.12731 ,\n        5.32512 , 11.156742,  6.480493,  8.366872,  4.695414, 11.036277,\n       11.86037 ,  6.239562,  7.56742 ,  6.874743,  7.011636,  2.962355,\n        1.97399 , 11.364819,  8.80219 ,  5.185489,  9.456537,  5.316906,\n        0.996578,  5.771389, 10.327173,  2.852841,  2.340862,  5.199179,\n       10.231348,  2.004107, 13.34976 , 11.017112,  9.982204,  3.474333,\n        8.093087,  5.114305,  6.214921,  1.946612,  7.477071, 11.389459,\n       11.545517,  5.637235,  7.449692,  2.696783,  0.936328, 11.195072,\n        1.609856, 11.739904,  7.378508,  6.31896 ,  6.754278,  2.086242,\n       10.351814, 13.174538,  8.128679,  6.464066,  9.407255,  8.73922 ,\n        2.149213,  6.143737,  8.394251,  8.213552,  5.347023,  6.609172,\n        7.296372,  7.477071, 10.108145,  8.232717,  2.157426,  3.219713,\n        4.095825, 11.200548,  7.594798,  9.596167, 12.503765,  6.245038,\n        4.952772, 12.736482,  1.716632,  7.088296, 13.749487,  5.549624,\n        6.527036, 12.766598,  2.614648,  1.122519,  9.549624,  5.574264,\n        5.292266,  6.056126,  1.177276,  7.252567,  5.232033,  7.991786,\n        5.259411,  6.704997,  1.40178 ,  5.924709,  1.73306 ,  9.330595,\n        3.419576,  4.906229,  7.408624,  8.528405,  6.644764,  3.915127,\n       11.08282 ,  4.219028,  1.026694, 15.329227,  9.568789,  5.708419,\n        6.313484,  2.811773, 10.020534, 15.351129,  9.122519,  1.223819,\n        7.12115 ,  9.46475 ,  9.653662,  8.303901,  0.960986,  9.338809,\n        6.3436  ,  8.495551,  0.572211,  4.588638, 15.104723,  6.970568,\n        5.555099,  0.648871,  2.680356,  9.322382,  5.555099,  1.968515,\n       12.76386 ,  8.859685,  2.253251,  1.270363,  6.78987 ,  9.998631,\n       15.323751,  0.930869,  7.225188,  6.160164, 10.294319,  6.193018,\n       14.261465,  7.252567, 15.312799,  7.748118,  1.21013 ,  8.648871,\n        0.353183, 10.138261,  3.438741,  5.486653, 12.145106,  1.221081,\n        9.330595])"},"exec_count":47}},"pos":121,"start":1657649109339,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649110075,"exec_count":48,"id":"7ca860","input":"y_train = y[train_idx]","kernel":"python3-ubuntu","pos":122,"start":1657649110067,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649110661,"exec_count":49,"id":"a5346a","input":"x_test = X[test_idx]","kernel":"python3-ubuntu","pos":123,"start":1657649110653,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649111316,"exec_count":50,"id":"f8b871","input":"y_test = y[test_idx]","kernel":"python3-ubuntu","pos":124,"start":1657649111305,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649112897,"exec_count":51,"id":"8002a4","input":"x_train= x_train.reshape(-1, 2)\n\ny_train= y_train.reshape(-1, 1)\n\nx_test = x_test.reshape(-1, 2)","kernel":"python3-ubuntu","output":{"0":{"ename":"ValueError","evalue":"cannot reshape array of size 217 into shape (2)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-51-7e2286df8b0e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mx_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 217 into shape (2)"]}},"pos":126,"start":1657649112887,"state":"done","type":"cell"}
{"cell_type":"code","end":1657649118712,"exec_count":52,"id":"ad0e74","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n\n\n\n\nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","metadata":{"id":"wKS4pvcEsLOF"},"output":{"0":{"ename":"NameError","evalue":"name 'length' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-52-e2ef2be8b87c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlength\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#shuffle our dataset indices so we don't always split the same way!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'length' is not defined"]}},"pos":130,"start":1657649118695,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"042535","input":"","pos":56,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"07b2c7","input":"","pos":100,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"102b47","input":"X = my_data[[\"horsepower\", \"weight\"]].to_numpy()\n\ny = my_data[\"mpg\"].to_numpy()","metadata":{"id":"WW77IzOwZaKp"},"pos":102,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"12c3c8","input":"","pos":82,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1478db","input":"","pos":68,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1ab068","input":"# Convert to png using system command (requires Graphviz)\nfrom subprocess import call\ncall(['dot', '-Tpng', 'tree.dot', '-o', 'tree.png', '-Gdpi=600'])\n\n# Display in jupyter notebook\nfrom IPython.display import Image\nImage(filename = 'tree.png')","pos":80,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1ada61","input":"","pos":66,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1df609","input":"","pos":104,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2aeff1","input":"from sklearn.tree import export_graphviz\n# Export as dot file\n\nestimator = clf.estimators_[15]\n","pos":78,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2bb462","input":"print(linr.intercept_, linr.coef_[0])","pos":143,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2d992c","input":" from sklearn.ensemble import RandomForestClassifier","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"323d64","input":"X = my_data[[\"horsepower\", \"weight\"]]","pos":97,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3e0eef","input":"","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"404a9d","input":"#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"pos":145,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"41e877","input":"print(linr.intercept_, linr.coef_)","pos":144,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"42bf02","input":"clf = RandomForestClassifier(max_depth = 3, random_state = 0, n_estimators = 20)","pos":73,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4aec75","input":"my_data","pos":55,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4bb882","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4bec04","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4d9bdf","input":"plt.scatter(x_test, y_test, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","pos":149,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"522466","input":"","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"52be31","input":"\nfrom sklearn import metrics\nconfusion_matrix = metrics.confusion_matrix(y_test, y_hat)\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [\"low\", \"high\"])\n\ncm_display.plot()\n\nplt.show()","pos":77,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"535370","input":"","pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"563e1f","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat)\n\nplt.scatter(x_test, y_test, c='orange')\n\nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"pos":151,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5d3586","input":"","pos":85,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"653b76","input":"","pos":62,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"65ceff","input":"","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6860eb","input":"y_hat = clf.predict(x_test)\ny_hat","pos":89,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7ab758","input":"clf.fit(x_train, y_train)","pos":74,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"891746","input":"confusion_matrix = metrics.confusion_matrix(y_test, y_hat)\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [\"low\", \"high\"])\n\ncm_display.plot()\n\nplt.show()","pos":92,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"89e0f1","input":"","pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8ce06c","input":"(9 + 5) / 79","pos":93,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8dba21","input":"","pos":59,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"91cf83","input":"","pos":86,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"92e987","input":"","pos":83,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"94cc8e","input":"my_data[\"mpg_type\"] = my_data[\"mpg\"].apply(divide_mpg)","pos":54,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"972904","input":"","pos":134,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"981236","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"pos":95,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9bc1e7","input":"","pos":81,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9d720c","input":"idx = np.arange(len(X))\nnp.random.shuffle(idx)\n\nsplit_threshold = int(len(X) * 0.8)","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a2fe26","input":"","pos":107,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a4ab2c","input":"","pos":132,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a60ea0","input":"","pos":135,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a8bd37","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ad7682","input":"","pos":76,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b12444","input":"","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b74b2e","input":"","pos":150,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bf6f75","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c0f441","input":"","pos":156,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c37dc0","input":"y_train","pos":71,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c52c9c","input":"from sklearn import metrics","pos":91,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c5d56d","input":"export_graphviz(estimator, out_file='tree.dot',\n                rounded = True, proportion = False, \n                precision = 2, filled = True)","pos":79,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d49043","input":"","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dd5b6c","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e482fb","input":"","pos":131,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fbe0b8","input":"","pos":137,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ff7800","input":"\n\n","pos":103,"type":"cell"}
{"cell_type":"code","exec_count":128,"id":"51e30e","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"8.555938178647908"},"exec_count":128,"output_type":"execute_result"}},"pos":154,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"723127","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":14,"output_type":"execute_result"}},"pos":40,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"48b7b4","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\nlength = len(my_data.index) #save length of array of later","metadata":{"id":"BYHvay0xa-sK"},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5f092e","input":"my_data[\"mpg\"].min()","output":{"0":{"data":{"text/plain":"9.0"},"exec_count":16,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"6fd3c6","input":"my_data[\"mpg\"].max()","output":{"0":{"data":{"text/plain":"46.6"},"exec_count":17,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6faeec","input":"my_data[\"mpg\"].mean()","output":{"0":{"data":{"text/plain":"23.445918367346938"},"exec_count":18,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"9852fe","input":"plt.hist(my_data[\"weight\"])","output":{"0":{"data":{"text/plain":"(array([30., 89., 58., 52., 36., 40., 29., 34., 18.,  6.]),\n array([1613. , 1965.7, 2318.4, 2671.1, 3023.8, 3376.5, 3729.2, 4081.9,\n        4434.6, 4787.3, 5140. ]),\n <a list of 10 Patch objects>)"},"exec_count":19,"output_type":"execute_result"},"1":{"data":{"image/png":"f103abc37527fba20a8173a83dd56d52db2a2704","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":19,"metadata":{"image/png":{"height":411,"width":703},"needs_background":"light"},"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"47a484","input":"my_data.head(10)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>429.0</td>\n      <td>198.0</td>\n      <td>4341</td>\n      <td>10.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford galaxie 500</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>14.0</td>\n      <td>8</td>\n      <td>454.0</td>\n      <td>220.0</td>\n      <td>4354</td>\n      <td>9.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet impala</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>14.0</td>\n      <td>8</td>\n      <td>440.0</td>\n      <td>215.0</td>\n      <td>4312</td>\n      <td>8.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth fury iii</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14.0</td>\n      <td>8</td>\n      <td>455.0</td>\n      <td>225.0</td>\n      <td>4425</td>\n      <td>10.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>pontiac catalina</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>390.0</td>\n      <td>190.0</td>\n      <td>3850</td>\n      <td>8.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc ambassador dpl</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n5  15.0          8         429.0       198.0    4341          10.0   \n6  14.0          8         454.0       220.0    4354           9.0   \n7  14.0          8         440.0       215.0    4312           8.5   \n8  14.0          8         455.0       225.0    4425          10.0   \n9  15.0          8         390.0       190.0    3850           8.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  \n5          70    usa           ford galaxie 500  \n6          70    usa           chevrolet impala  \n7          70    usa          plymouth fury iii  \n8          70    usa           pontiac catalina  \n9          70    usa         amc ambassador dpl  "},"exec_count":20,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"9d3796","input":"# for mpg value lower than 20, it'll be labeled as low,\n# for mpg higher than 20, we'll label it as high. ","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"928e82","input":"my_data[\"mpg\"].min()","output":{"0":{"data":{"text/plain":"9.0"},"exec_count":22,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"5848fc","input":"my_data[\"mpg\"].max()","output":{"0":{"data":{"text/plain":"46.6"},"exec_count":23,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"204801","input":"def divide_mpg(x):\n    if float(x) <= 20:\n        return \"low\"\n    else:\n        return \"high\"","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"2d8a8c","input":"from sklearn import svm","pos":63,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"d3ac44","input":"X = my_data[[\"horsepower\", \"acceleration\", \"weight\"]].to_numpy()  ","pos":64,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"534453","input":"y = my_data[\"mpg_type\"]","output":{"0":{"ename":"KeyError","evalue":"'mpg_type'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3621\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3622\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'mpg_type'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-7d9d7c8d405a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmy_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"mpg_type\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3504\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3505\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3506\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3507\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3622\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3623\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3624\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3625\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'mpg_type'"]}},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"b1d50a","input":"x_train = X[:split_threshold]\nx_test = X[split_threshold:]\n\ny_train = y[:split_threshold]\ny_test = y[split_threshold:]","output":{"0":{"ename":"NameError","evalue":"name 'split_threshold' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-dc6c0b22b186>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msplit_threshold\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mx_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msplit_threshold\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0msplit_threshold\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msplit_threshold\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'split_threshold' is not defined"]}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"e21d46","input":"y_hat = clf.predict(x_test)","output":{"0":{"ename":"NameError","evalue":"name 'clf' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-0cf3e8b542dd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_hat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'clf' is not defined"]}},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"c7491e","input":"clf = svm.SVC()","pos":87,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"d31f1e","input":"clf.fit(x_train, y_train)","output":{"0":{"ename":"NameError","evalue":"name 'x_train' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-5c93c534242c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}},"pos":88,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"28bf44","input":"y_test","output":{"0":{"ename":"NameError","evalue":"name 'y_test' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-27d3425f7a85>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"7f18e7","input":"X","output":{"0":{"data":{"text/plain":"array([[ 130. ,   12. , 3504. ],\n       [ 165. ,   11.5, 3693. ],\n       [ 150. ,   11. , 3436. ],\n       ...,\n       [  84. ,   11.6, 2295. ],\n       [  79. ,   18.6, 2625. ],\n       [  82. ,   19.4, 2720. ]])"},"exec_count":34,"output_type":"execute_result"}},"pos":98,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"064b30","input":"type(X)","output":{"0":{"data":{"text/plain":"numpy.ndarray"},"exec_count":35,"output_type":"execute_result"}},"pos":99,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"cb4a7f","input":"type(X.to_numpy())","output":{"0":{"ename":"AttributeError","evalue":"'numpy.ndarray' object has no attribute 'to_numpy'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-01983a347e61>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'to_numpy'"]}},"pos":101,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"7e0d3a","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set\nplt.subplot(1,2,1)\nplt.scatter(x_train, y_train, c='orange')\nplt.xlabel('x', fontsize = 20)\nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')","output":{"0":{"ename":"NameError","evalue":"name 'x_train' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-d3ec9b920535>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# plot the train set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]},"1":{"data":{"image/png":"0476fd12729a83cadfc75bc7f278ea0391dd8f42","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":306,"width":298},"needs_background":"light"},"output_type":"execute_result"}},"pos":133,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"93ec62","input":"# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"ename":"NameError","evalue":"name 'x_test' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-830dc0efc8a0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# plot the test set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_test' is not defined"]},"1":{"data":{"image/png":"114cd6bb793bbf9e09d0df69320e353512de0cc7","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":42,"metadata":{"image/png":{"height":415,"width":349},"needs_background":"light"},"output_type":"execute_result"}},"pos":136,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"d5b06d","input":"from sklearn.linear_model import LinearRegression","pos":139,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"3e2b46","input":"#Create the model object\nlinr = LinearRegression()","pos":140,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"63d8d0","input":"type(linr)","output":{"0":{"data":{"text/plain":"sklearn.linear_model._base.LinearRegression"},"exec_count":45,"output_type":"execute_result"}},"pos":141,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"e6c666","input":"linr.fit(x_train, y_train)","output":{"0":{"ename":"NameError","evalue":"name 'x_train' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-ad3feed3c49c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlinr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_train' is not defined"]}},"pos":142,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"2b9499","input":"# Predicting using SKLearn\n\n# y_hat is the predicted vlaue of y_test\ny_hat = linr.predict(x_test)\n\n# y = 39.36562799 + (-0.15297545 * x)\n\n\n","metadata":{"id":"o9ZDJB1qrJ7_"},"output":{"0":{"ename":"NameError","evalue":"name 'x_test' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-be71ebaeab53>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# y_hat is the predicted vlaue of y_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0my_hat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# y = 39.36562799 + (-0.15297545 * x)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x_test' is not defined"]}},"pos":147,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"f75390","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')","output":{"0":{"ename":"NameError","evalue":"name 'x_test' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-b2e79123d893>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#plotting results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x_test' is not defined"]},"1":{"data":{"text/plain":"<Figure size 720x360 with 0 Axes>"},"exec_count":48,"output_type":"execute_result"}},"pos":148,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"671852","input":"# print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"pos":153,"type":"cell"}
{"cell_type":"code","id":"2debb6","input":"","pos":127,"type":"cell"}
{"cell_type":"code","id":"a5fce4","input":"","pos":125,"type":"cell"}
{"cell_type":"code","id":"b5d523","input":"","pos":111,"type":"cell"}
{"cell_type":"code","id":"bde199","input":"","pos":22,"type":"cell"}
{"cell_type":"code","id":"c1086d","input":"","pos":24,"type":"cell"}
{"cell_type":"code","id":"d07991","input":"","pos":128,"type":"cell"}
{"cell_type":"code","id":"f819d0","input":"","pos":29,"type":"cell"}
{"cell_type":"code","id":"ff8cec","input":"","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"054137","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":146,"type":"cell"}
{"cell_type":"markdown","id":"171d4a","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference\n\n","pos":129,"type":"cell"}
{"cell_type":"markdown","id":"2bddb3","input":"<u>random forest</u>\n\n","pos":70,"type":"cell"}
{"cell_type":"markdown","id":"332300","input":"#\n\n","pos":57,"type":"cell"}
{"cell_type":"markdown","id":"3e6700","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"6ca2ce","input":"# Linear regression using SKLearn on your own Data!\n\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!\n\n","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7ce81c","input":"### Split the data\n\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.\n\n","metadata":{"id":"g5Zk8_6ksLur"},"pos":106,"type":"cell"}
{"cell_type":"markdown","id":"920892","input":"### Creating and Fitting\n\n","metadata":{"id":"e1m-wKeYsFEl"},"pos":138,"type":"cell"}
{"cell_type":"markdown","id":"a17f59","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html\n\n","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"a4d47f","input":"### Results and Evaluation\n\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).\n\n","metadata":{"id":"14TdY4RGr-RG"},"pos":152,"type":"cell"}
{"cell_type":"markdown","id":"db3836","input":"# SVM _& Random Forest_\n\n","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"e5a74a","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":155,"type":"cell"}
{"cell_type":"markdown","id":"e9b06b","input":"# Data splitting\n\n","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"f99e96","input":"# Data Loading, Cleaning, and Setup\n\n","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"fab2f6","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n\n","metadata":{"id":"w78dUshNZarz"},"pos":96,"type":"cell"}
{"cell_type":"markdown","id":"fc050c","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learnâ€™s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n\n","metadata":{"id":"cbeaQMpna-sR"},"pos":105,"type":"cell"}
{"cell_type":"markdown","id":"ffe450","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! \n\n","metadata":{"id":"J3L_hb0Ou4sn"},"pos":94,"type":"cell"}
{"id":0,"time":1657648809570,"type":"user"}
{"last_load":1657648809379,"type":"file"}