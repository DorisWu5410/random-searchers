{"backend_state":"running","connection_file":"/projects/0f214c2c-3a4f-4d36-bdfe-4d58d7af3d54/.local/share/jupyter/runtime/kernel-0c1fce29-a12e-4bb6-bc68-5ae7abe9b61d.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657302671173,"exec_count":2,"id":"c39e32","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1657302670280,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302678732,"exec_count":3,"id":"caf8ee","input":"df = pd.read_csv(\"../../NKI_cleaned.csv\")","kernel":"python3-ubuntu","pos":5,"start":1657302678423,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302678912,"exec_count":4,"id":"27ea0b","input":"df.tail()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>...</th>\n      <th>Contig36312_RC</th>\n      <th>Contig38980_RC</th>\n      <th>NM_000853</th>\n      <th>NM_000854</th>\n      <th>NM_000860</th>\n      <th>Contig29014_RC</th>\n      <th>Contig46616_RC</th>\n      <th>NM_000888</th>\n      <th>NM_000898</th>\n      <th>AF067420</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>267</th>\n      <td>s71</td>\n      <td>308</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2.6083</td>\n      <td>1.982204</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.695745</td>\n      <td>-0.076025</td>\n      <td>0.201054</td>\n      <td>-0.108361</td>\n      <td>0.222534</td>\n      <td>-0.471391</td>\n      <td>0.026301</td>\n      <td>0.476758</td>\n      <td>-0.468408</td>\n      <td>-0.843889</td>\n    </tr>\n    <tr>\n      <th>268</th>\n      <td>s72</td>\n      <td>309</td>\n      <td>39</td>\n      <td>1</td>\n      <td>5.5041</td>\n      <td>3.028063</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.743322</td>\n      <td>0.108220</td>\n      <td>0.083472</td>\n      <td>-0.859677</td>\n      <td>-0.551512</td>\n      <td>-0.191424</td>\n      <td>-0.844488</td>\n      <td>-0.357929</td>\n      <td>-0.585760</td>\n      <td>0.169989</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>s73</td>\n      <td>310</td>\n      <td>50</td>\n      <td>1</td>\n      <td>2.6192</td>\n      <td>2.149213</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.778710</td>\n      <td>0.251779</td>\n      <td>-0.063160</td>\n      <td>0.450576</td>\n      <td>0.452686</td>\n      <td>1.055764</td>\n      <td>0.591880</td>\n      <td>-0.510884</td>\n      <td>0.251903</td>\n      <td>-0.822792</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>s75</td>\n      <td>311</td>\n      <td>52</td>\n      <td>1</td>\n      <td>2.2905</td>\n      <td>2.209446</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.614775</td>\n      <td>-0.417394</td>\n      <td>-0.077948</td>\n      <td>-0.126006</td>\n      <td>-0.841332</td>\n      <td>-0.274742</td>\n      <td>-0.063019</td>\n      <td>-0.396531</td>\n      <td>0.356816</td>\n      <td>0.345088</td>\n    </tr>\n    <tr>\n      <th>271</th>\n      <td>s76</td>\n      <td>312</td>\n      <td>52</td>\n      <td>1</td>\n      <td>3.7370</td>\n      <td>2.127310</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>-0.234388</td>\n      <td>0.181319</td>\n      <td>-0.030782</td>\n      <td>-1.035581</td>\n      <td>-0.521642</td>\n      <td>-0.301661</td>\n      <td>-0.060805</td>\n      <td>0.794952</td>\n      <td>-1.089303</td>\n      <td>-0.326193</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 1570 columns</p>\n</div>","text/plain":"    Patient   ID  age  eventdeath  survival  timerecurrence  chemo  hormonal  \\\n267     s71  308   48           1    2.6083        1.982204      1         0   \n268     s72  309   39           1    5.5041        3.028063      0         0   \n269     s73  310   50           1    2.6192        2.149213      0         0   \n270     s75  311   52           1    2.2905        2.209446      0         1   \n271     s76  312   52           1    3.7370        2.127310      0         0   \n\n     amputation  histtype  ...  Contig36312_RC  Contig38980_RC  NM_000853  \\\n267           1         1  ...       -0.695745       -0.076025   0.201054   \n268           1         1  ...       -0.743322        0.108220   0.083472   \n269           1         1  ...       -0.778710        0.251779  -0.063160   \n270           1         1  ...       -0.614775       -0.417394  -0.077948   \n271           1         1  ...       -0.234388        0.181319  -0.030782   \n\n     NM_000854  NM_000860  Contig29014_RC  Contig46616_RC  NM_000888  \\\n267  -0.108361   0.222534       -0.471391        0.026301   0.476758   \n268  -0.859677  -0.551512       -0.191424       -0.844488  -0.357929   \n269   0.450576   0.452686        1.055764        0.591880  -0.510884   \n270  -0.126006  -0.841332       -0.274742       -0.063019  -0.396531   \n271  -1.035581  -0.521642       -0.301661       -0.060805   0.794952   \n\n     NM_000898  AF067420  \n267  -0.468408 -0.843889  \n268  -0.585760  0.169989  \n269   0.251903 -0.822792  \n270   0.356816  0.345088  \n271  -1.089303 -0.326193  \n\n[5 rows x 1570 columns]"},"exec_count":4}},"pos":6,"start":1657302678881,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302679070,"exec_count":5,"id":"52e985","input":"df = df[['Patient', 'ID', 'age', 'eventdeath', 'survival', 'timerecurrence',\n       'chemo', 'hormonal', 'amputation', 'histtype']]","kernel":"python3-ubuntu","pos":7,"start":1657302679058,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302679252,"exec_count":6,"id":"a9b09c","input":"df.dropna(inplace=True)","kernel":"python3-ubuntu","pos":8,"start":1657302679238,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302679427,"exec_count":7,"id":"164eaf","input":"df.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272, 10)"},"exec_count":7}},"pos":9,"start":1657302679410,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302679620,"exec_count":8,"id":"961bd7","input":"df.head(10)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s122</td>\n      <td>18</td>\n      <td>43</td>\n      <td>0</td>\n      <td>14.817248</td>\n      <td>14.817248</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s123</td>\n      <td>19</td>\n      <td>48</td>\n      <td>0</td>\n      <td>14.261465</td>\n      <td>14.261465</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s124</td>\n      <td>20</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.644764</td>\n      <td>6.644764</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s125</td>\n      <td>21</td>\n      <td>50</td>\n      <td>0</td>\n      <td>7.748118</td>\n      <td>7.748118</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s126</td>\n      <td>22</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.436687</td>\n      <td>6.318960</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>s127</td>\n      <td>23</td>\n      <td>42</td>\n      <td>0</td>\n      <td>5.037645</td>\n      <td>2.743326</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>s128</td>\n      <td>24</td>\n      <td>50</td>\n      <td>0</td>\n      <td>8.739220</td>\n      <td>8.739220</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>s129</td>\n      <td>25</td>\n      <td>43</td>\n      <td>0</td>\n      <td>7.567420</td>\n      <td>7.567420</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>s130</td>\n      <td>26</td>\n      <td>47</td>\n      <td>0</td>\n      <td>7.296372</td>\n      <td>7.296372</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>s131</td>\n      <td>27</td>\n      <td>39</td>\n      <td>1</td>\n      <td>4.662560</td>\n      <td>1.114305</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  Patient  ID  age  eventdeath   survival  timerecurrence  chemo  hormonal  \\\n0    s122  18   43           0  14.817248       14.817248      0         0   \n1    s123  19   48           0  14.261465       14.261465      0         0   \n2    s124  20   38           0   6.644764        6.644764      0         0   \n3    s125  21   50           0   7.748118        7.748118      0         1   \n4    s126  22   38           0   6.436687        6.318960      0         0   \n5    s127  23   42           0   5.037645        2.743326      1         0   \n6    s128  24   50           0   8.739220        8.739220      1         1   \n7    s129  25   43           0   7.567420        7.567420      1         0   \n8    s130  26   47           0   7.296372        7.296372      1         0   \n9    s131  27   39           1   4.662560        1.114305      0         0   \n\n   amputation  histtype  \n0           1         1  \n1           0         1  \n2           0         1  \n3           0         1  \n4           1         1  \n5           1         1  \n6           0         1  \n7           0         1  \n8           0         1  \n9           0         1  "},"exec_count":8}},"pos":10,"start":1657302679602,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302680770,"exec_count":9,"id":"e7a621","input":"sns.heatmap(df.corr())","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f949211b2e0>"},"exec_count":9},"1":{"data":{"image/png":"10e65c448b7c50b1c86dc51087b53300c2ed1b5e","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":415,"width":718},"needs_background":"light"}}},"pos":11,"start":1657302679868,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302680782,"exec_count":10,"id":"4a30fc","input":"X = df[\"hormonal\"].to_numpy()","kernel":"python3-ubuntu","pos":12,"start":1657302680776,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302680817,"exec_count":11,"id":"e33da4","input":"y = df[\"survival\"].to_numpy()","kernel":"python3-ubuntu","pos":13,"start":1657302680803,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302680831,"exec_count":12,"id":"180376","input":"X.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":12}},"pos":14,"start":1657302680828,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302680978,"exec_count":13,"id":"f0f0fd","input":"y.shape","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"(272,)"},"exec_count":13}},"pos":15,"start":1657302680970,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302681830,"exec_count":14,"id":"267c13","input":"idx = np.arange(len(X)) ","kernel":"python3-ubuntu","pos":16,"start":1657302681823,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302682050,"exec_count":15,"id":"0d63cc","input":"np.random.shuffle(idx)","kernel":"python3-ubuntu","pos":17,"start":1657302682048,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302682926,"exec_count":16,"id":"9995be","input":"idx","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([266, 163, 202, 237,  71,  60, 140, 188, 184, 238, 130,  99, 121,\n        98,  15, 182, 133,  56, 134, 207, 194, 116,  39,  40, 212,  13,\n       261,  44,  43,  59, 208,  86,  80,  19,  97,  61,  31,  57, 260,\n        62,  16, 189, 259,  95, 222,  87, 147, 132,  45,  52, 159,  54,\n       186, 135, 179,  69,  34, 181,  81,  88, 170, 215, 263, 210,  48,\n         9, 250, 257, 176, 145,  10, 265, 165, 158, 241, 193, 240,  21,\n        27,  12, 112, 146, 268,  36, 196, 224, 213, 185,  41, 262, 205,\n       154, 167, 267,  37,  20, 195,  23, 203, 173, 172, 155, 104,  11,\n       264,  47, 220, 270, 235,  73, 101,   8, 269, 139, 234, 129,  65,\n       115, 221, 144, 233,  58, 157, 114, 160,  66,  82,  49, 251,  85,\n         2,  63,  64,   1, 236,  25,  38, 229, 249, 216, 187, 102, 211,\n        17,  70, 128, 206,  72,  14, 246, 245,   7, 230,  50,  90,  67,\n       164, 244, 271, 247,   4, 180, 209,  29, 138, 226, 153, 223, 178,\n       256, 199, 239,  22,  77, 200,  76, 149, 161,  28, 171, 124,  26,\n       218,  96, 110,  74, 125,  79,   0, 243,  93,  30, 232, 219,   3,\n       252,  84, 248,   6, 143, 183,  89,  33, 168, 204, 192, 100, 113,\n       258, 141, 191, 225, 117,  42,  46, 108, 151, 127, 175,  94, 119,\n       197, 137,  35, 105, 201, 174, 103, 118, 111,   5, 126, 142,  53,\n        55,  92,  83,  75, 242, 198,  91,  68, 107,  51, 150, 123, 177,\n       227, 106, 156, 169, 166, 231, 152, 214, 253, 190, 120,  18, 131,\n       228, 162, 148, 122, 254,  32, 136, 217,  24,  78, 255, 109])"},"exec_count":16}},"pos":18,"start":1657302682913,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302684118,"exec_count":17,"id":"7e8524","input":"split_threshold = int(len(X) * 0.8)","kernel":"python3-ubuntu","pos":19,"start":1657302684108,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302684789,"exec_count":18,"id":"72fc74","input":"split_threshold","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"217"},"exec_count":18}},"pos":20,"start":1657302684761,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685034,"exec_count":19,"id":"2f321a","input":"train_idx = idx[:split_threshold]","kernel":"python3-ubuntu","pos":21,"start":1657302685019,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685195,"exec_count":20,"id":"dc8917","input":"test_idx = idx[split_threshold:]","kernel":"python3-ubuntu","pos":22,"start":1657302685189,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685456,"exec_count":21,"id":"31635f","input":"x_train = X[train_idx]","kernel":"python3-ubuntu","pos":23,"start":1657302685402,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685562,"exec_count":22,"id":"65e01d","input":"y_train = y[train_idx]","kernel":"python3-ubuntu","pos":24,"start":1657302685557,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685749,"exec_count":23,"id":"d74f2c","input":"x_test = X[test_idx]","kernel":"python3-ubuntu","pos":25,"start":1657302685736,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302685903,"exec_count":24,"id":"df5421","input":"y_test = y[test_idx]","kernel":"python3-ubuntu","pos":26,"start":1657302685890,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302686100,"exec_count":25,"id":"2ba5fd","input":"x_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","pos":27,"start":1657302686095,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302686634,"exec_count":26,"id":"f9eef3","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set\nplt.subplot(1,2,1)\nplt.scatter(x_train, y_train, c='orange')\nplt.xlabel('hormonal', fontsize = 20)\nplt.ylabel('survival', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"ccd1c1f2ce62a88a2705877816253b98f9172f9d","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":321},"needs_background":"light"}}},"pos":28,"start":1657302686253,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302687583,"exec_count":27,"id":"3d50f8","input":"from sklearn.linear_model import LinearRegression\nlinr2 = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr2.fit(x_train, y_train)\n\nprint(linr2.intercept_, linr2.coef_[0])\n","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[8.43130082] [-1.64084059]\n"}},"pos":29,"start":1657302687482,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302687699,"exec_count":28,"id":"8a5c47","input":"y_hat = linr2.predict(x_test)","kernel":"python3-ubuntu","pos":30,"start":1657302687694,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302688159,"exec_count":29,"id":"97ac37","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat)\n\nplt.scatter(x_test, y_test, c='orange')\n\nplt.xlabel('timereccurrence', fontsize = 20) \nplt.ylabel('survival', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"5d4f198ed32762934d0bfd813288b2db8453a93b","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":625},"needs_background":"light"}}},"pos":31,"start":1657302687851,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302688286,"exec_count":30,"id":"fa1db4","input":"df[\"survival\"].min()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.711841"},"exec_count":30}},"pos":33,"start":1657302688281,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302688776,"exec_count":31,"id":"9abf5f","input":"df[\"survival\"].max()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"18.340862"},"exec_count":31}},"pos":34,"start":1657302688771,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302689122,"exec_count":32,"id":"086c1d","input":"def divide_survival(x):\n    if float(x) <= 10:\n        return \"low\"\n    else:\n        return \"high\"","kernel":"python3-ubuntu","pos":35,"start":1657302689112,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302689293,"exec_count":33,"id":"49ed00","input":"df[\"survival\"].apply(divide_survival)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0      high\n1      high\n2       low\n3       low\n4       low\n       ... \n267     low\n268     low\n269     low\n270     low\n271     low\nName: survival, Length: 272, dtype: object"},"exec_count":33}},"pos":36,"start":1657302689279,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302689818,"exec_count":34,"id":"795f07","input":"df[\"survival_type\"] = df[\"survival\"].apply(divide_survival)","kernel":"python3-ubuntu","pos":37,"start":1657302689809,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302690002,"exec_count":35,"id":"955b4d","input":"from sklearn import svm","kernel":"python3-ubuntu","pos":38,"start":1657302689986,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302690155,"exec_count":36,"id":"251f53","input":"X = df[[\"age\", \"hormonal\"]].to_numpy()","kernel":"python3-ubuntu","pos":39,"start":1657302690145,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302690492,"exec_count":37,"id":"e2bd01","input":"y = df[\"survival_type\"]","kernel":"python3-ubuntu","pos":40,"start":1657302690483,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302690670,"exec_count":38,"id":"aa1d40","input":"idx = np.arange(len(X))\nnp.random.shuffle(idx)\n\nsplit_threshold = int(len(X) * 0.8)","kernel":"python3-ubuntu","pos":41,"start":1657302690660,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302690842,"exec_count":39,"id":"643cba","input":"x_train = X[:split_threshold]\nx_test = X[split_threshold:]\n\ny_train = y[:split_threshold]\ny_test = y[split_threshold:]","kernel":"python3-ubuntu","pos":42,"start":1657302690834,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302691022,"exec_count":40,"id":"fe73db","input":"clf = svm.SVC()","kernel":"python3-ubuntu","pos":43,"start":1657302691010,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302691216,"exec_count":41,"id":"fab05c","input":"clf.fit(x_train, y_train)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"SVC()"},"exec_count":41}},"pos":44,"start":1657302691197,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302691412,"exec_count":42,"id":"49476f","input":"y_hat = clf.predict(x_test)\ny_hat","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array(['low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low', 'low',\n       'low'], dtype=object)"},"exec_count":42}},"pos":45,"start":1657302691398,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302691619,"exec_count":43,"id":"5cc97e","input":"y_test","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"217     low\n218    high\n219    high\n220    high\n221    high\n222    high\n223     low\n224     low\n225     low\n226     low\n227     low\n228     low\n229     low\n230     low\n231     low\n232    high\n233    high\n234     low\n235     low\n236    high\n237     low\n238     low\n239     low\n240     low\n241     low\n242     low\n243     low\n244     low\n245     low\n246    high\n247    high\n248    high\n249     low\n250    high\n251     low\n252     low\n253     low\n254     low\n255     low\n256     low\n257     low\n258    high\n259    high\n260    high\n261     low\n262     low\n263     low\n264     low\n265     low\n266     low\n267     low\n268     low\n269     low\n270     low\n271     low\nName: survival_type, dtype: object"},"exec_count":43}},"pos":46,"start":1657302691612,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302691798,"exec_count":44,"id":"b7e07c","input":"from sklearn import metrics","kernel":"python3-ubuntu","pos":47,"start":1657302691793,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302692560,"exec_count":45,"id":"1362c9","input":"confusion_matrix = metrics.confusion_matrix(y_test, y_hat)\n\ncm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [\"low\", \"high\"])\n\ncm_display.plot()\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"c554b71d08d927cd4f43cca72cf2f2c5c835c2f3","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":428,"width":509},"needs_background":"light"}}},"pos":48,"start":1657302691976,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302696192,"exec_count":46,"id":"9186f8","input":"df","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>survival_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s122</td>\n      <td>18</td>\n      <td>43</td>\n      <td>0</td>\n      <td>14.817248</td>\n      <td>14.817248</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s123</td>\n      <td>19</td>\n      <td>48</td>\n      <td>0</td>\n      <td>14.261465</td>\n      <td>14.261465</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s124</td>\n      <td>20</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.644764</td>\n      <td>6.644764</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s125</td>\n      <td>21</td>\n      <td>50</td>\n      <td>0</td>\n      <td>7.748118</td>\n      <td>7.748118</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s126</td>\n      <td>22</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.436687</td>\n      <td>6.318960</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>267</th>\n      <td>s71</td>\n      <td>308</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2.608300</td>\n      <td>1.982204</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>268</th>\n      <td>s72</td>\n      <td>309</td>\n      <td>39</td>\n      <td>1</td>\n      <td>5.504100</td>\n      <td>3.028063</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>s73</td>\n      <td>310</td>\n      <td>50</td>\n      <td>1</td>\n      <td>2.619200</td>\n      <td>2.149213</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>s75</td>\n      <td>311</td>\n      <td>52</td>\n      <td>1</td>\n      <td>2.290500</td>\n      <td>2.209446</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>271</th>\n      <td>s76</td>\n      <td>312</td>\n      <td>52</td>\n      <td>1</td>\n      <td>3.737000</td>\n      <td>2.127310</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n  </tbody>\n</table>\n<p>272 rows Ã— 11 columns</p>\n</div>","text/plain":"    Patient   ID  age  eventdeath   survival  timerecurrence  chemo  hormonal  \\\n0      s122   18   43           0  14.817248       14.817248      0         0   \n1      s123   19   48           0  14.261465       14.261465      0         0   \n2      s124   20   38           0   6.644764        6.644764      0         0   \n3      s125   21   50           0   7.748118        7.748118      0         1   \n4      s126   22   38           0   6.436687        6.318960      0         0   \n..      ...  ...  ...         ...        ...             ...    ...       ...   \n267     s71  308   48           1   2.608300        1.982204      1         0   \n268     s72  309   39           1   5.504100        3.028063      0         0   \n269     s73  310   50           1   2.619200        2.149213      0         0   \n270     s75  311   52           1   2.290500        2.209446      0         1   \n271     s76  312   52           1   3.737000        2.127310      0         0   \n\n     amputation  histtype survival_type  \n0             1         1          high  \n1             0         1          high  \n2             0         1           low  \n3             0         1           low  \n4             1         1           low  \n..          ...       ...           ...  \n267           1         1           low  \n268           1         1           low  \n269           1         1           low  \n270           1         1           low  \n271           1         1           low  \n\n[272 rows x 11 columns]"},"exec_count":46}},"pos":54,"start":1657302696170,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302696397,"exec_count":47,"id":"3bd9d6","input":"def data_convert(num):\n    if num == 1:\n        return True\n    else:\n        return False","kernel":"python3-ubuntu","pos":55,"start":1657302696389,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302697038,"exec_count":48,"id":"e629d1","input":"df[\"hormonal\"] = df[\"hormonal\"].apply(data_convert)","kernel":"python3-ubuntu","pos":56,"start":1657302697026,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302697433,"exec_count":49,"id":"3372e7","input":"df[\"chemo\"] = df[\"chemo\"].apply(data_convert)","kernel":"python3-ubuntu","pos":57,"start":1657302697426,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302698350,"exec_count":50,"id":"ae61cc","input":"df[\"amputation\"] = df[\"amputation\"].apply(data_convert)","kernel":"python3-ubuntu","pos":58,"start":1657302698339,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302698636,"exec_count":51,"id":"064130","input":"df","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>survival_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s122</td>\n      <td>18</td>\n      <td>43</td>\n      <td>0</td>\n      <td>14.817248</td>\n      <td>14.817248</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s123</td>\n      <td>19</td>\n      <td>48</td>\n      <td>0</td>\n      <td>14.261465</td>\n      <td>14.261465</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s124</td>\n      <td>20</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.644764</td>\n      <td>6.644764</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s125</td>\n      <td>21</td>\n      <td>50</td>\n      <td>0</td>\n      <td>7.748118</td>\n      <td>7.748118</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s126</td>\n      <td>22</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.436687</td>\n      <td>6.318960</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>267</th>\n      <td>s71</td>\n      <td>308</td>\n      <td>48</td>\n      <td>1</td>\n      <td>2.608300</td>\n      <td>1.982204</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>268</th>\n      <td>s72</td>\n      <td>309</td>\n      <td>39</td>\n      <td>1</td>\n      <td>5.504100</td>\n      <td>3.028063</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>s73</td>\n      <td>310</td>\n      <td>50</td>\n      <td>1</td>\n      <td>2.619200</td>\n      <td>2.149213</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>270</th>\n      <td>s75</td>\n      <td>311</td>\n      <td>52</td>\n      <td>1</td>\n      <td>2.290500</td>\n      <td>2.209446</td>\n      <td>False</td>\n      <td>True</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>271</th>\n      <td>s76</td>\n      <td>312</td>\n      <td>52</td>\n      <td>1</td>\n      <td>3.737000</td>\n      <td>2.127310</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n  </tbody>\n</table>\n<p>272 rows Ã— 11 columns</p>\n</div>","text/plain":"    Patient   ID  age  eventdeath   survival  timerecurrence  chemo  hormonal  \\\n0      s122   18   43           0  14.817248       14.817248  False     False   \n1      s123   19   48           0  14.261465       14.261465  False     False   \n2      s124   20   38           0   6.644764        6.644764  False     False   \n3      s125   21   50           0   7.748118        7.748118  False      True   \n4      s126   22   38           0   6.436687        6.318960  False     False   \n..      ...  ...  ...         ...        ...             ...    ...       ...   \n267     s71  308   48           1   2.608300        1.982204   True     False   \n268     s72  309   39           1   5.504100        3.028063  False     False   \n269     s73  310   50           1   2.619200        2.149213  False     False   \n270     s75  311   52           1   2.290500        2.209446  False      True   \n271     s76  312   52           1   3.737000        2.127310  False     False   \n\n     amputation  histtype survival_type  \n0          True         1          high  \n1         False         1          high  \n2         False         1           low  \n3         False         1           low  \n4          True         1           low  \n..          ...       ...           ...  \n267        True         1           low  \n268        True         1           low  \n269        True         1           low  \n270        True         1           low  \n271        True         1           low  \n\n[272 rows x 11 columns]"},"exec_count":51}},"pos":59,"start":1657302698614,"state":"done","type":"cell"}
{"cell_type":"code","end":1657302699028,"exec_count":52,"id":"b141d3","input":"df.head(10)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Patient</th>\n      <th>ID</th>\n      <th>age</th>\n      <th>eventdeath</th>\n      <th>survival</th>\n      <th>timerecurrence</th>\n      <th>chemo</th>\n      <th>hormonal</th>\n      <th>amputation</th>\n      <th>histtype</th>\n      <th>survival_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>s122</td>\n      <td>18</td>\n      <td>43</td>\n      <td>0</td>\n      <td>14.817248</td>\n      <td>14.817248</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>s123</td>\n      <td>19</td>\n      <td>48</td>\n      <td>0</td>\n      <td>14.261465</td>\n      <td>14.261465</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>s124</td>\n      <td>20</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.644764</td>\n      <td>6.644764</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>s125</td>\n      <td>21</td>\n      <td>50</td>\n      <td>0</td>\n      <td>7.748118</td>\n      <td>7.748118</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>s126</td>\n      <td>22</td>\n      <td>38</td>\n      <td>0</td>\n      <td>6.436687</td>\n      <td>6.318960</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>s127</td>\n      <td>23</td>\n      <td>42</td>\n      <td>0</td>\n      <td>5.037645</td>\n      <td>2.743326</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>s128</td>\n      <td>24</td>\n      <td>50</td>\n      <td>0</td>\n      <td>8.739220</td>\n      <td>8.739220</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>s129</td>\n      <td>25</td>\n      <td>43</td>\n      <td>0</td>\n      <td>7.567420</td>\n      <td>7.567420</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>s130</td>\n      <td>26</td>\n      <td>47</td>\n      <td>0</td>\n      <td>7.296372</td>\n      <td>7.296372</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>s131</td>\n      <td>27</td>\n      <td>39</td>\n      <td>1</td>\n      <td>4.662560</td>\n      <td>1.114305</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>low</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  Patient  ID  age  eventdeath   survival  timerecurrence  chemo  hormonal  \\\n0    s122  18   43           0  14.817248       14.817248  False     False   \n1    s123  19   48           0  14.261465       14.261465  False     False   \n2    s124  20   38           0   6.644764        6.644764  False     False   \n3    s125  21   50           0   7.748118        7.748118  False      True   \n4    s126  22   38           0   6.436687        6.318960  False     False   \n5    s127  23   42           0   5.037645        2.743326   True     False   \n6    s128  24   50           0   8.739220        8.739220   True      True   \n7    s129  25   43           0   7.567420        7.567420   True     False   \n8    s130  26   47           0   7.296372        7.296372   True     False   \n9    s131  27   39           1   4.662560        1.114305  False     False   \n\n   amputation  histtype survival_type  \n0        True         1          high  \n1       False         1          high  \n2       False         1           low  \n3       False         1           low  \n4        True         1           low  \n5        True         1           low  \n6       False         1           low  \n7       False         1           low  \n8       False         1           low  \n9       False         1           low  "},"exec_count":52}},"pos":60,"start":1657302698992,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"086060","input":"","pos":66,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"15621a","input":"#Car Dataset\nfilename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","metadata":{"id":"mBcweiAXW3bC"},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"32890d","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"id":"6IxwdW5osUDI"},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"374a6c","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","metadata":{"id":"WW77IzOwZaKp"},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4318c8","input":"","pos":89,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4d3f30","input":"print(linr.score(x_test, y_test))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.5749959307112218\n"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6f5a2b","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f145260ae90>"},"exec_count":0,"output_type":"execute_result"},"1":{"data":{"image/png":"2608aca97f140c66d79a1201aa96d93a3a828437","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":0,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7e1141","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"b183aad68e9d92822d562b2d62bac4ab20c205c4","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":0,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9c7286","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"\n  <div id=\"df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf\">\n    <div class=\"colab-df-container\">\n      <div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf')\"\n              title=\"Convert this dataframe to an interactive table.\"\n              style=\"display:none;\">\n        \n  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n       width=\"24px\">\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n  </svg>\n      </button>\n      \n  <style>\n    .colab-df-container {\n      display:flex;\n      flex-wrap:wrap;\n      gap: 12px;\n    }\n\n    .colab-df-convert {\n      background-color: #E8F0FE;\n      border: none;\n      border-radius: 50%;\n      cursor: pointer;\n      display: none;\n      fill: #1967D2;\n      height: 32px;\n      padding: 0 0 0 0;\n      width: 32px;\n    }\n\n    .colab-df-convert:hover {\n      background-color: #E2EBFA;\n      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n      fill: #174EA6;\n    }\n\n    [theme=dark] .colab-df-convert {\n      background-color: #3B4455;\n      fill: #D2E3FC;\n    }\n\n    [theme=dark] .colab-df-convert:hover {\n      background-color: #434B5C;\n      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n      fill: #FFFFFF;\n    }\n  </style>\n\n      <script>\n        const buttonEl =\n          document.querySelector('#df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf button.colab-df-convert');\n        buttonEl.style.display =\n          google.colab.kernel.accessAllowed ? 'block' : 'none';\n\n        async function convertToInteractive(key) {\n          const element = document.querySelector('#df-27ad4a61-f8b2-41d4-ac64-4ca80752f8cf');\n          const dataTable =\n            await google.colab.kernel.invokeFunction('convertToInteractive',\n                                                     [key], {});\n          if (!dataTable) return;\n\n          const docLinkHtml = 'Like what you see? Visit the ' +\n            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n            + ' to learn more about interactive tables.';\n          element.innerHTML = '';\n          dataTable['output_type'] = 'display_data';\n          await google.colab.output.renderOutput(dataTable, element);\n          const docLink = document.createElement('div');\n          docLink.innerHTML = docLinkHtml;\n          element.appendChild(docLink);\n        }\n      </script>\n    </div>\n  </div>\n  ","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":0,"output_type":"execute_result"}},"pos":69,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a278df","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","metadata":{"id":"BYHvay0xa-sK"},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a70a64","input":"","pos":67,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c1760c","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":83,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ccee09","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","metadata":{"id":"wKS4pvcEsLOF"},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d9c63d","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[39.36562799] [-0.15297545]\n"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fb74de","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"7.756195456791836"},"exec_count":0,"output_type":"execute_result"}},"pos":87,"type":"cell"}
{"cell_type":"code","id":"24f73b","input":"","pos":61,"type":"cell"}
{"cell_type":"code","id":"5adfb7","input":"","pos":63,"type":"cell"}
{"cell_type":"code","id":"6672c9","input":"","pos":65,"type":"cell"}
{"cell_type":"code","id":"8f1579","input":"","pos":50,"type":"cell"}
{"cell_type":"code","id":"96e264","input":"","pos":62,"type":"cell"}
{"cell_type":"code","id":"9e1e85","input":"","pos":49,"type":"cell"}
{"cell_type":"code","id":"bd50be","input":"","pos":32,"type":"cell"}
{"cell_type":"code","id":"bdfe9d","input":"","pos":51,"type":"cell"}
{"cell_type":"code","id":"c323d8","input":"","pos":53,"type":"cell"}
{"cell_type":"code","id":"e85022","input":"","pos":64,"type":"cell"}
{"cell_type":"code","id":"eb5fee","input":"","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"094796","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"0ef453","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":77,"type":"cell"}
{"cell_type":"markdown","id":"176531","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n","metadata":{"id":"w78dUshNZarz"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"23b5a0","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":85,"type":"cell"}
{"cell_type":"markdown","id":"3071d6","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":80,"type":"cell"}
{"cell_type":"markdown","id":"30d1d3","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"392741","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"53d36f","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"85d566","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":82,"type":"cell"}
{"cell_type":"markdown","id":"ab40e6","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"cd39ca","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"cf19e1","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":88,"type":"cell"}
{"cell_type":"markdown","id":"d744f3","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learnâ€™s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":75,"type":"cell"}
{"id":0,"time":1657133800935,"type":"user"}
{"last_load":1657298761271,"type":"file"}